
import asyncio
import os
import re
from typing import List, Dict, Optional
from pyrogram import Client
from pyrogram.errors import FloodWait
from app.database import Account, get_db
from app.config import API_ID, API_HASH, SESSIONS_DIR
from cryptography.fernet import Fernet

class ViewsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.clients: Dict[int, Client] = {}
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        encryption_key = os.getenv('ENCRYPTION_KEY')
        if encryption_key:
            self.cipher = Fernet(encryption_key.encode())
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            key = Fernet.generate_key()
            self.cipher = Fernet(key)
            print(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ViewsManager")
    
    def _parse_proxy(self, proxy_string: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        if not proxy_string:
            return None

        parts = proxy_string.split("://")
        if len(parts) != 2:
            return None

        scheme = parts[0].lower()
        rest = parts[1]

        if "@" in rest:
            auth, address = rest.split("@", 1)
            username, password = auth.split(":", 1)
        else:
            username = password = None
            address = rest

        host, port = address.split(":", 1)

        return {
            "scheme": scheme,
            "hostname": host,
            "port": int(port),
            "username": username,
            "password": password
        }
    
    async def _get_client_for_account(self, account_id: int) -> Optional[Client]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–ª–∏–µ–Ω—Ç–æ–≤
            if account_id in self.clients:
                client = self.clients[account_id]
                if hasattr(client, 'is_connected') and client.is_connected:
                    return client
                else:
                    del self.clients[account_id]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account or not account.is_active:
                    print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                    return None

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}")
                
                if not os.path.exists(f"{session_file}.session"):
                    print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}.session")
                    return None

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                client = Client(
                    name=session_file,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º name= –≤–º–µ—Å—Ç–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                    api_id=API_ID,
                    api_hash=API_HASH,
                    proxy=self._parse_proxy(account.proxy) if account.proxy else None,
                    sleep_threshold=30,
                    max_concurrent_transmissions=1,
                    no_updates=True,
                    workers=1
                )

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                try:
                    await asyncio.wait_for(client.connect(), timeout=15)
                    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {account_id} –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    try:
                        me = await asyncio.wait_for(client.get_me(), timeout=10)
                        client.me = me
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {me.first_name}")
                    except (asyncio.TimeoutError, FloodWait) as timeout_error:
                        print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {timeout_error}")
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä–æ
                        from types import SimpleNamespace
                        client.me = SimpleNamespace(
                            id=account_id,
                            first_name=account.name or "User",
                            is_premium=False,
                            is_verified=False,
                            is_bot=False
                        )

                    self.clients[account_id] = client
                    return client

                except Exception as connect_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {connect_error}")
                    try:
                        await client.disconnect()
                    except:
                        pass
                    return None

            except Exception as db_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {db_error}")
                return None
            finally:
                db.close()
                
        except Exception as general_error:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {general_error}")
            return None
    
    def _parse_post_url(self, post_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ URL –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –∏ message_id"""
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
            patterns = [
                r't\.me/([^/]+)/(\d+)',  # t.me/channel/123
                r'telegram\.me/([^/]+)/(\d+)',  # telegram.me/channel/123
                r'@([^/]+)/(\d+)',  # @channel/123
            ]
            
            for pattern in patterns:
                match = re.search(pattern, post_url)
                if match:
                    chat_username = match.group(1)
                    message_id = int(match.group(2))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if not chat_username.startswith('@'):
                        chat_username = f"@{chat_username}"
                    
                    return {
                        "chat_id": chat_username,
                        "message_id": message_id
                    }
            
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL: {post_url}")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {post_url}: {e}")
            return None
    
    async def view_post(self, account_id: int, chat_id: str, message_id: int) -> Dict:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        try:
            print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç {message_id} –≤ —á–∞—Ç–µ {chat_id} –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
            
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not hasattr(client, 'is_connected') or not client.is_connected:
                print(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç {account_id}")
                try:
                    await client.connect()
                except Exception as reconnect_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {reconnect_error}")
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(reconnect_error)}"}
            
            try:
                # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º raw API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–∞
                from pyrogram.raw import functions
                
                # –ü–æ–ª—É—á–∞–µ–º peer –¥–ª—è –∫–∞–Ω–∞–ª–∞
                try:
                    peer = await client.resolve_peer(chat_id)
                    print(f"‚úÖ Peer –ø–æ–ª—É—á–µ–Ω –¥–ª—è {chat_id}")
                except Exception as peer_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è peer: {peer_error}")
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è peer: {str(peer_error)}"}
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GetMessages
                try:
                    result = await client.invoke(
                        functions.channels.GetMessages(
                            channel=peer,
                            id=[message_id]
                        )
                    )
                except Exception as invoke_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ GetMessages: {invoke_error}")
                    # –ü—Ä–æ–±—É–µ–º fallback –º–µ—Ç–æ–¥ —Å—Ä–∞–∑—É
                    try:
                        message = await client.get_messages(chat_id, message_id)
                        if message:
                            await client.read_chat_history(chat_id, max_id=message_id)
                            print(f"‚úÖ Fallback –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                            return {
                                "status": "success",
                                "message": f"–ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id} (fallback)",
                                "post_id": message_id,
                                "views": getattr(message, 'views', 'N/A')
                            }
                        else:
                            return {"status": "error", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
                    except Exception as fallback_error:
                        print(f"‚ùå Fallback –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")
                        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(fallback_error)}"}
                    
                    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ API: {str(invoke_error)}"}
                
                if result and result.messages:
                    message = result.messages[0]
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ raw API –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é ReadHistory
                    try:
                        await client.invoke(
                            functions.messages.ReadHistory(
                                peer=peer,
                                max_id=message_id
                            )
                        )
                        print(f"üìñ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è –¥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                    except Exception as read_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {read_error}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º GetHistory –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
                    try:
                        await client.invoke(
                            functions.messages.GetHistory(
                                peer=peer,
                                offset_id=message_id,
                                offset_date=0,
                                add_offset=0,
                                limit=1,
                                max_id=0,
                                min_id=0,
                                hash=0
                            )
                        )
                        print(f"üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞")
                    except Exception as history_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {history_error}")
                    
                    return {
                        "status": "success",
                        "message": f"–ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}",
                        "post_id": message_id,
                        "views": getattr(message, 'views', 'N/A')
                    }
                else:
                    # Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                    message = await client.get_messages(chat_id, message_id)
                    
                    if message:
                        await client.read_chat_history(chat_id, max_id=message_id)
                        print(f"‚úÖ Fallback –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                        
                        return {
                            "status": "success",
                            "message": f"–ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id} (fallback)",
                            "post_id": message_id,
                            "views": getattr(message, 'views', 'N/A')
                        }
                    else:
                        return {"status": "error", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
                    
            except Exception as view_error:
                error_msg = str(view_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞: {error_msg}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "CHANNEL_PRIVATE" in error_msg:
                    return {"status": "error", "message": "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                elif "MSG_ID_INVALID" in error_msg:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                elif "CHAT_ADMIN_REQUIRED" in error_msg:
                    return {"status": "error", "message": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}
                elif "USER_BANNED_IN_CHANNEL" in error_msg:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                elif "FLOOD_WAIT" in error_msg:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –æ—à–∏–±–∫–∏
                    wait_time = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if "FLOOD_WAIT_" in error_msg:
                        try:
                            wait_time = int(error_msg.split("FLOOD_WAIT_")[1])
                        except:
                            pass
                    return {"status": "flood_wait", "wait_time": wait_time}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {error_msg}"}
                    
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    async def view_post_telethon(self, account_id: int, chat_id: str, message_id: int) -> Dict:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–µ–∑ Telethon"""
        try:
            print(f"üì± Telethon: –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç {message_id} –≤ {chat_id} –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                from app.database import Account
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telethon
                try:
                    from telethon import TelegramClient
                    from telethon.tl.functions.messages import GetHistoryRequest
                    from telethon.tl.functions.channels import GetMessagesRequest
                    from telethon.tl.types import InputChannel
                except ImportError:
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                import uuid
                from app.config import API_ID, API_HASH, SESSIONS_DIR
                import os
                
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")
                
                if not os.path.exists(pyrogram_session_file):
                    return {"status": "error", "message": "–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                unique_session_name = f"telethon_view_{uuid.uuid4().hex[:8]}"
                telethon_session_file = os.path.join(SESSIONS_DIR, unique_session_name)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                await self._create_clean_telethon_session(pyrogram_session_file, telethon_session_file)
                
                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)
                
                try:
                    await telethon_client.start()
                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name}")
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                    else:
                        target_entity = chat_id
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
                    entity = await telethon_client.get_entity(target_entity)
                    print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞")
                    
                    # –ú–µ—Ç–æ–¥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        if hasattr(entity, 'access_hash'):  # –≠—Ç–æ –∫–∞–Ω–∞–ª
                            input_channel = InputChannel(entity.id, entity.access_hash)
                            result = await telethon_client(GetMessagesRequest(
                                channel=input_channel,
                                id=[message_id]
                            ))
                            
                            if result.messages:
                                print(f"‚úÖ Telethon: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                                
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–∫—Ä—É–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
                                await telethon_client(GetHistoryRequest(
                                    peer=entity,
                                    offset_id=message_id,
                                    offset_date=0,
                                    add_offset=0,
                                    limit=1,
                                    max_id=0,
                                    min_id=0,
                                    hash=0
                                ))
                                print(f"üìú Telethon: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞")
                                
                                return {
                                    "status": "success",
                                    "message": f"Telethon: –ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}",
                                    "post_id": message_id
                                }
                        else:
                            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤
                            message = await telethon_client.get_messages(entity, ids=message_id)
                            if message:
                                print(f"‚úÖ Telethon: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–æ")
                                return {
                                    "status": "success",
                                    "message": f"Telethon: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}",
                                    "post_id": message_id
                                }
                            
                    except Exception as get_error:
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {get_error}")
                        return {"status": "error", "message": f"Telethon: {str(get_error)}"}
                
                finally:
                    await telethon_client.disconnect()
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                    except:
                        pass
                        
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}
    
    async def _create_clean_telethon_session(self, pyrogram_path: str, telethon_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–π —Å–µ—Å—Å–∏–∏ Telethon –∏–∑ Pyrogram"""
        try:
            import sqlite3
            import os
            
            # –ß–∏—Ç–∞–µ–º auth_key –∏–∑ Pyrogram —Å–µ—Å—Å–∏–∏
            conn = sqlite3.connect(pyrogram_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT dc_id, auth_key FROM sessions LIMIT 1")
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Pyrogram —Å–µ—Å—Å–∏–∏")
            
            dc_id, auth_key = result
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Telethon
            telethon_session_file = f"{telethon_path}.session"
            if os.path.exists(telethon_session_file):
                os.remove(telethon_session_file)
            
            conn = sqlite3.connect(telethon_session_file)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Telethon
            cursor.execute("CREATE TABLE version (version INTEGER PRIMARY KEY)")
            cursor.execute("INSERT INTO version VALUES (1)")
            
            cursor.execute("""
                CREATE TABLE sessions (
                    dc_id INTEGER PRIMARY KEY,
                    server_address TEXT,
                    port INTEGER,
                    auth_key BLOB,
                    takeout_id INTEGER
                )
            """)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º server_address –ø–æ dc_id
            dc_servers = {
                1: "149.154.175.53",
                2: "149.154.167.51", 
                3: "149.154.175.100",
                4: "149.154.167.91",
                5: "91.108.56.130"
            }
            
            server_address = dc_servers.get(dc_id, "149.154.167.51")
            
            cursor.execute("""
                INSERT INTO sessions (dc_id, server_address, port, auth_key, takeout_id)
                VALUES (?, ?, ?, ?, NULL)
            """, (dc_id, server_address, 443, auth_key))
            
            cursor.execute("""
                CREATE TABLE entities (
                    id INTEGER PRIMARY KEY,
                    hash INTEGER NOT NULL,
                    username TEXT,
                    phone INTEGER,
                    name TEXT,
                    date INTEGER
                )
            """)
            
            cursor.execute("""
                CREATE TABLE sent_files (
                    md5_digest BLOB,
                    file_size INTEGER,
                    type INTEGER,
                    id INTEGER,
                    hash INTEGER,
                    PRIMARY KEY(md5_digest, file_size, type)
                )
            """)
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telethon —Å–µ—Å—Å–∏–∏: {e}")
            raise e

    async def boost_post_views(self, post_url: str, target_views: int, 
                             account_ids: List[int], delay_seconds: int = 10) -> Dict:
        """–ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–∞"""
        try:
            print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {post_url}")
            print(f"üéØ –¶–µ–ª—å: {target_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
            print(f"üë• –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_seconds} —Å–µ–∫—É–Ω–¥")
            
            # –ü–∞—Ä—Å–∏–º URL –ø–æ—Å—Ç–∞
            post_info = self._parse_post_url(post_url)
            if not post_info:
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –ø–æ—Å—Ç–∞"}
            
            chat_id = post_info["chat_id"]
            message_id = post_info["message_id"]
            
            print(f"üìç –ö–∞–Ω–∞–ª: {chat_id}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            db = next(get_db())
            try:
                accounts = db.query(Account).filter(
                    Account.id.in_(account_ids),
                    Account.is_active == True
                ).all()
                
                if not accounts:
                    return {"status": "error", "message": "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
            finally:
                db.close()
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–∫—Ä—É—Ç–∫–∏
            results = {
                "successful_views": 0,
                "failed_views": 0,
                "errors": [],
                "flood_waits": 0
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É
            views_completed = 0
            account_index = 0
            
            while views_completed < target_views and account_index < len(accounts) * 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ—Ö–æ–¥–∞
                account = accounts[account_index % len(accounts)]
                
                print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä {views_completed + 1}/{target_views} –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id} ({account.name})")
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä (–ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞)
                    result = await self.view_post(account.id, chat_id, message_id)
                    
                    # –ï—Å–ª–∏ Pyrogram –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Telethon
                    if result["status"] == "error" and "–Ω–µ —É–¥–∞–ª–æ—Å—å" in result["message"].lower():
                        print(f"üîÑ –ü—Ä–æ–±—É–µ–º Telethon –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}")
                        result = await self.view_post_telethon(account.id, chat_id, message_id)
                    
                    if result["status"] == "success":
                        results["successful_views"] += 1
                        views_completed += 1
                        print(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä {views_completed} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        
                    elif result["status"] == "flood_wait":
                        wait_time = result.get("wait_time", 30)
                        results["flood_waits"] += 1
                        print(f"‚è∞ FLOOD_WAIT {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}")
                        
                        # –ï—Å–ª–∏ flood wait —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        if wait_time > 300:  # 5 –º–∏–Ω—É—Ç
                            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {account.id} (—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ)")
                        else:
                            # –ñ–¥–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                            await asyncio.sleep(min(wait_time, 60))
                            continue
                            
                    else:
                        results["failed_views"] += 1
                        error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        results["errors"].append(f"–ê–∫–∫–∞—É–Ω—Ç {account.id}: {error_msg}")
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {error_msg}")
                    
                except Exception as e:
                    results["failed_views"] += 1
                    error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {str(e)}"
                    results["errors"].append(error_msg)
                    print(f"‚ùå {error_msg}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
                account_index += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
                if views_completed < target_views and delay_seconds > 0:
                    await asyncio.sleep(delay_seconds)
            
            print(f"üéâ –ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ: {results['successful_views']}, –û—à–∏–±–æ–∫: {results['failed_views']}")
            
            return {
                "status": "success",
                "message": f"–ù–∞–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {results['successful_views']}, –û—à–∏–±–æ–∫: {results['failed_views']}",
                "results": results,
                "target_views": target_views,
                "completed_views": results["successful_views"]
            }
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    async def disconnect_client(self, account_id: int):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if account_id in self.clients:
            try:
                client = self.clients[account_id]
                if hasattr(client, 'is_connected') and client.is_connected:
                    await client.disconnect()
                del self.clients[account_id]
                print(f"üîå –ö–ª–∏–µ–Ω—Ç {account_id} –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {e}")
    
    async def disconnect_all_clients(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        for account_id in list(self.clients.keys()):
            await self.disconnect_client(account_id)
        print("üîå –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
views_manager = ViewsManager()
