
import asyncio
import os
import re
from typing import List, Dict, Optional
from pyrogram import Client
from pyrogram.errors import FloodWait
from app.database import Account, get_db
from app.config import API_ID, API_HASH, SESSIONS_DIR
from cryptography.fernet import Fernet

class ViewsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.clients: Dict[int, Client] = {}
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        encryption_key = os.getenv('ENCRYPTION_KEY')
        if encryption_key:
            self.cipher = Fernet(encryption_key.encode())
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            key = Fernet.generate_key()
            self.cipher = Fernet(key)
            print(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ViewsManager")
    
    def _parse_proxy(self, proxy_string: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        if not proxy_string:
            return None

        parts = proxy_string.split("://")
        if len(parts) != 2:
            return None

        scheme = parts[0].lower()
        rest = parts[1]

        if "@" in rest:
            auth, address = rest.split("@", 1)
            username, password = auth.split(":", 1)
        else:
            username = password = None
            address = rest

        host, port = address.split(":", 1)

        return {
            "scheme": scheme,
            "hostname": host,
            "port": int(port),
            "username": username,
            "password": password
        }
    
    async def _get_client_for_account(self, account_id: int) -> Optional[Client]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–ª–∏–µ–Ω—Ç–æ–≤
        if account_id in self.clients:
            client = self.clients[account_id]
            if hasattr(client, 'is_connected') and client.is_connected:
                return client
            else:
                del self.clients[account_id]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
        db = next(get_db())
        try:
            account = db.query(Account).filter(Account.id == account_id).first()
            if not account or not account.is_active:
                return None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
            phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
            session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}")
            
            if not os.path.exists(f"{session_file}.session"):
                print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}.session")
                return None

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = Client(
                session_file,
                api_id=API_ID,
                api_hash=API_HASH,
                proxy=self._parse_proxy(account.proxy) if account.proxy else None,
                sleep_threshold=30,
                max_concurrent_transmissions=1,
                no_updates=True,
                workers=1
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            try:
                await asyncio.wait_for(client.connect(), timeout=15)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    me = await asyncio.wait_for(client.get_me(), timeout=10)
                    client.me = me
                except (asyncio.TimeoutError, FloodWait):
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä–æ
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name=account.name or "User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

                self.clients[account_id] = client
                return client

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {e}")
                try:
                    await client.disconnect()
                except:
                    pass
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {e}")
            return None
        finally:
            db.close()
    
    def _parse_post_url(self, post_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ URL –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –∏ message_id"""
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
            patterns = [
                r't\.me/([^/]+)/(\d+)',  # t.me/channel/123
                r'telegram\.me/([^/]+)/(\d+)',  # telegram.me/channel/123
                r'@([^/]+)/(\d+)',  # @channel/123
            ]
            
            for pattern in patterns:
                match = re.search(pattern, post_url)
                if match:
                    chat_username = match.group(1)
                    message_id = int(match.group(2))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if not chat_username.startswith('@'):
                        chat_username = f"@{chat_username}"
                    
                    return {
                        "chat_id": chat_username,
                        "message_id": message_id
                    }
            
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL: {post_url}")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {post_url}: {e}")
            return None
    
    async def view_post(self, account_id: int, chat_id: str, message_id: int) -> Dict:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ (–∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä)"""
        try:
            print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç {message_id} –≤ —á–∞—Ç–µ {chat_id} –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
            
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not client.is_connected:
                await client.connect()
            
            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä
            try:
                # –ú–µ—Ç–æ–¥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                message = await client.get_messages(chat_id, message_id)
                
                if message:
                    print(f"‚úÖ –ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é
                    try:
                        await client.read_chat_history(chat_id, max_id=message_id)
                        print(f"üìñ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è –¥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                    except Exception as read_error:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é: {read_error}")
                    
                    return {
                        "status": "success",
                        "message": f"–ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}",
                        "post_id": message_id,
                        "views": getattr(message, 'views', 'N/A')
                    }
                else:
                    return {"status": "error", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
                    
            except Exception as view_error:
                error_msg = str(view_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞: {error_msg}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "CHANNEL_PRIVATE" in error_msg:
                    return {"status": "error", "message": "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                elif "MSG_ID_INVALID" in error_msg:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                elif "CHAT_ADMIN_REQUIRED" in error_msg:
                    return {"status": "error", "message": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}
                elif "USER_BANNED_IN_CHANNEL" in error_msg:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                elif "FLOOD_WAIT" in error_msg:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –æ—à–∏–±–∫–∏
                    wait_time = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if "FLOOD_WAIT_" in error_msg:
                        try:
                            wait_time = int(error_msg.split("FLOOD_WAIT_")[1])
                        except:
                            pass
                    return {"status": "flood_wait", "wait_time": wait_time}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {error_msg}"}
                    
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    async def boost_post_views(self, post_url: str, target_views: int, 
                             account_ids: List[int], delay_seconds: int = 10) -> Dict:
        """–ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–∞"""
        try:
            print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç {post_url}")
            print(f"üéØ –¶–µ–ª—å: {target_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
            print(f"üë• –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_seconds} —Å–µ–∫—É–Ω–¥")
            
            # –ü–∞—Ä—Å–∏–º URL –ø–æ—Å—Ç–∞
            post_info = self._parse_post_url(post_url)
            if not post_info:
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –ø–æ—Å—Ç–∞"}
            
            chat_id = post_info["chat_id"]
            message_id = post_info["message_id"]
            
            print(f"üìç –ö–∞–Ω–∞–ª: {chat_id}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            db = next(get_db())
            try:
                accounts = db.query(Account).filter(
                    Account.id.in_(account_ids),
                    Account.is_active == True
                ).all()
                
                if not accounts:
                    return {"status": "error", "message": "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
            finally:
                db.close()
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–∫—Ä—É—Ç–∫–∏
            results = {
                "successful_views": 0,
                "failed_views": 0,
                "errors": [],
                "flood_waits": 0
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∫—Ä—É—Ç–∫—É
            views_completed = 0
            account_index = 0
            
            while views_completed < target_views and account_index < len(accounts) * 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ—Ö–æ–¥–∞
                account = accounts[account_index % len(accounts)]
                
                print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä {views_completed + 1}/{target_views} –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id} ({account.name})")
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                    result = await self.view_post(account.id, chat_id, message_id)
                    
                    if result["status"] == "success":
                        results["successful_views"] += 1
                        views_completed += 1
                        print(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä {views_completed} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        
                    elif result["status"] == "flood_wait":
                        wait_time = result.get("wait_time", 30)
                        results["flood_waits"] += 1
                        print(f"‚è∞ FLOOD_WAIT {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}")
                        
                        # –ï—Å–ª–∏ flood wait —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        if wait_time > 300:  # 5 –º–∏–Ω—É—Ç
                            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {account.id} (—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ)")
                        else:
                            # –ñ–¥–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                            await asyncio.sleep(min(wait_time, 60))
                            continue
                            
                    else:
                        results["failed_views"] += 1
                        error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        results["errors"].append(f"–ê–∫–∫–∞—É–Ω—Ç {account.id}: {error_msg}")
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {error_msg}")
                    
                except Exception as e:
                    results["failed_views"] += 1
                    error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {str(e)}"
                    results["errors"].append(error_msg)
                    print(f"‚ùå {error_msg}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
                account_index += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
                if views_completed < target_views and delay_seconds > 0:
                    await asyncio.sleep(delay_seconds)
            
            print(f"üéâ –ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ: {results['successful_views']}, –û—à–∏–±–æ–∫: {results['failed_views']}")
            
            return {
                "status": "success",
                "message": f"–ù–∞–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {results['successful_views']}, –û—à–∏–±–æ–∫: {results['failed_views']}",
                "results": results,
                "target_views": target_views,
                "completed_views": results["successful_views"]
            }
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    async def disconnect_client(self, account_id: int):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if account_id in self.clients:
            try:
                client = self.clients[account_id]
                if hasattr(client, 'is_connected') and client.is_connected:
                    await client.disconnect()
                del self.clients[account_id]
                print(f"üîå –ö–ª–∏–µ–Ω—Ç {account_id} –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {e}")
    
    async def disconnect_all_clients(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        for account_id in list(self.clients.keys()):
            await self.disconnect_client(account_id)
        print("üîå –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
views_manager = ViewsManager()
