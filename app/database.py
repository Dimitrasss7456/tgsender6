from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, Text, Float, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
from app.config import DATABASE_URL
import hashlib
import secrets

engine = create_engine(
    DATABASE_URL,
    connect_args={
        "check_same_thread": False,
        "timeout": 60  # –¢–∞–π–º–∞—É—Ç –¥–ª—è SQLite –æ–ø–µ—Ä–∞—Ü–∏–π
    },
    pool_size=100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
    max_overflow=200,  # –ï—â–µ –±–æ–ª—å—à–µ overflow –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
    pool_timeout=180,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pool_recycle=900,  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_reset_on_return='commit',  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    echo=False  # –û—Ç–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password_hash = Column(String)
    is_admin = Column(Boolean, default=False)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    last_login = Column(DateTime, nullable=True)

    # –°–≤—è–∑—å —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Telegram
    accounts = relationship("Account", back_populates="user")

    def set_password(self, password: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ö–µ—à –ø–∞—Ä–æ–ª—è"""
        self.password_hash = hashlib.sha256(password.encode()).hexdigest()

    def check_password(self, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å"""
        return self.password_hash == hashlib.sha256(password.encode()).hexdigest()

class UserSession(Base):
    __tablename__ = "user_sessions"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    session_token = Column(String, unique=True, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    expires_at = Column(DateTime)
    user_agent = Column(String, nullable=True)
    ip_address = Column(String, nullable=True)

class Account(Base):
    __tablename__ = "accounts"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=True)  # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    phone = Column(String, unique=True, index=True)
    name = Column(String)
    status = Column(String, default="offline")  # online, offline, blocked, error
    session_data = Column(Text)  # –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
    proxy = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    last_activity = Column(DateTime, default=datetime.utcnow)
    messages_sent_today = Column(Integer, default=0)
    messages_sent_hour = Column(Integer, default=0)
    last_message_time = Column(DateTime, nullable=True)
    is_active = Column(Boolean, default=True)

    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    bio = Column(Text, nullable=True)
    gender = Column(String, nullable=True)  # male, female, other
    profile_photo_path = Column(String, nullable=True)

    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="accounts")

class Campaign(Base):
    __tablename__ = "campaigns"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    delay_seconds = Column(Integer, default=1)
    private_message = Column(Text)
    group_message = Column(Text)
    channel_message = Column(Text)
    private_list = Column(Text)
    groups_list = Column(Text)
    channels_list = Column(Text)
    attachment_path = Column(String, nullable=True)
    status = Column(String, default="created")
    created_at = Column(DateTime, default=datetime.utcnow)
    account_id = Column(Integer, nullable=True)  # –î–ª—è –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    auto_delete_accounts = Column(Boolean, default=False)  # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    delete_delay_minutes = Column(Integer, default=5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö

    # –°–≤—è–∑–∏
    send_logs = relationship("SendLog", back_populates="campaign")


class SendLog(Base):
    __tablename__ = "send_logs"

    id = Column(Integer, primary_key=True, index=True)
    campaign_id = Column(Integer, ForeignKey("campaigns.id"))
    account_id = Column(Integer, ForeignKey("accounts.id"))
    recipient = Column(String)
    recipient_type = Column(String)  # private, group, channel
    status = Column(String)  # sent, failed
    error_message = Column(Text)
    sent_at = Column(DateTime, default=datetime.utcnow)

    # –°–≤—è–∑–∏
    campaign = relationship("Campaign", back_populates="send_logs")
    account = relationship("Account")

class CommentCampaign(Base):
    __tablename__ = "comment_campaigns"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    post_url = Column(String, nullable=False)
    comments_male = Column(Text)
    comments_female = Column(Text)
    delay_seconds = Column(Integer, default=60)
    status = Column(String, default="created")  # created, running, completed, stopped
    created_at = Column(DateTime, default=datetime.utcnow)
    started_at = Column(DateTime)
    completed_at = Column(DateTime)

class CommentLog(Base):
    __tablename__ = "comment_logs"

    id = Column(Integer, primary_key=True, index=True)
    campaign_id = Column(Integer, ForeignKey("comment_campaigns.id"), nullable=True)
    account_id = Column(Integer, ForeignKey("accounts.id"))
    chat_id = Column(String)  # ID —á–∞—Ç–∞ –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    message_id = Column(Integer)  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–ª–∏
    comment = Column(Text)  # –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    status = Column(String)  # sent, failed
    error_message = Column(Text)
    comment_message_id = Column(Integer, nullable=True)  # ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    sent_at = Column(DateTime, default=datetime.utcnow)

class ReactionCampaign(Base):
    __tablename__ = "reaction_campaigns"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    post_url = Column(String, nullable=False)
    reaction_emoji = Column(String, default="üëç")
    delay_seconds = Column(Integer, default=30)
    status = Column(String, default="created")
    created_at = Column(DateTime, default=datetime.utcnow)

class ViewCampaign(Base):
    __tablename__ = "view_campaigns"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    post_url = Column(String, nullable=False)
    delay_seconds = Column(Integer, default=15)
    status = Column(String, default="created")
    created_at = Column(DateTime, default=datetime.utcnow)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_db_session():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    return SessionLocal()

async def get_async_db_session():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º"""
    db = SessionLocal()
    try:
        return db
    except Exception as e:
        db.close()
        raise e