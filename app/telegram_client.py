import asyncio
import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from pyrogram import Client
from pyrogram.errors import FloodWait, SessionPasswordNeeded, PhoneCodeInvalid
from cryptography.fernet import Fernet
from sqlalchemy.orm import Session
from app.database import Account, Campaign, SendLog, get_db
from app.config import API_ID, API_HASH, SESSIONS_DIR, ENCRYPTION_KEY


class Progress:

    def __init__(self, filename, total_size):
        self.filename = filename
        self.total_size = total_size
        self.last_print = 0

    async def update(self, current, total):
        percent = (current / self.total_size) * 100
        if percent - self.last_print >= 5 or current == total:
            print(
                f"[{self.filename}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {current}/{self.total_size} bytes ({percent:.1f}%)"
            )
            self.last_print = percent


class TelegramManager:

    def __init__(self):
        self.clients: Dict[int, Client] = {}
        self.pending_clients: Dict[str, Client] = {}
        self.cipher = Fernet(ENCRYPTION_KEY)
        self._cleanup_temp_sessions()

    def _cleanup_temp_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π"""
        try:
            if not os.path.exists(SESSIONS_DIR):
                return
            for filename in os.listdir(SESSIONS_DIR):
                if filename.startswith('temp_client_') and filename.endswith(
                        '.session'):
                    temp_path = os.path.join(SESSIONS_DIR, filename)
                    try:
                        os.remove(temp_path)
                    except:
                        pass
        except Exception as e:
            print(f"Error cleaning temp sessions: {e}")

    def encrypt_session(self, session_data: str) -> str:
        return self.cipher.encrypt(session_data.encode()).decode()

    def decrypt_session(self, encrypted_data: str) -> str:
        return self.cipher.decrypt(encrypted_data.encode()).decode()

    async def add_account(self,
                          phone: str,
                          proxy: Optional[str] = None,
                          current_user_id: Optional[int] = None) -> Dict: # –î–æ–±–∞–≤–ª–µ–Ω current_user_id
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            clean_phone = phone.replace('+', '').replace(' ', '').replace(
                '(', '').replace(')', '').replace('-', '')
            session_name = f"session_{clean_phone}"
            session_path = os.path.join(SESSIONS_DIR, session_name)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            old_session_file = f"{session_path}.session"
            if os.path.exists(old_session_file):
                try:
                    os.remove(old_session_file)
                except:
                    pass

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not proxy:
                from app.proxy_manager import proxy_manager
                auto_proxy = proxy_manager.get_proxy_for_phone(phone)
                if auto_proxy:
                    proxy = auto_proxy
                    print(f"üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–∫—Å–∏ {proxy} –¥–ª—è {phone}")

            client = Client(session_path,
                            api_id=API_ID,
                            api_hash=API_HASH,
                            phone_number=phone,
                            proxy=self._parse_proxy(proxy) if proxy else None,
                            sleep_threshold=30,
                            max_concurrent_transmissions=1,
                            no_updates=True)

            await client.connect()

            try:
                me = await client.get_me()
                await self._save_account(phone, session_path, me.first_name,
                                         proxy, me.id, None, current_user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id –∏ current_user_id
                await client.disconnect()
                return {"status": "success", "name": me.first_name}
            except:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    await asyncio.sleep(1)
                    sent_code = await client.send_code(phone)
                    self.pending_clients[session_name] = client

                    print(
                        f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}, hash: {sent_code.phone_code_hash}"
                    )

                    return {
                        "status": "code_required",
                        "phone_code_hash": sent_code.phone_code_hash,
                        "session_name": session_name
                    }
                except Exception as send_error:
                    await client.disconnect()
                    error_msg = str(send_error)
                    if "flood" in error_msg.lower():
                        return {
                            "status": "error",
                            "message":
                            "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                        }
                    return {
                        "status": "error",
                        "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {error_msg}"
                    }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    async def verify_code(self,
                          phone: str,
                          code: str,
                          phone_code_hash: str,
                          session_name: str,
                          proxy: Optional[str] = None,
                          current_user_id: Optional[int] = None): # –î–æ–±–∞–≤–ª–µ–Ω current_user_id
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ SMS"""
        try:
            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            clean_code = ''.join(filter(str.isdigit, code.strip()))

            if len(clean_code) != 5:
                return {
                    "status":
                    "error",
                    "message": "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä"
                }

            client = self.pending_clients.get(session_name)

            if not client:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if not proxy:
                    from app.proxy_manager import proxy_manager
                    auto_proxy = proxy_manager.get_proxy_for_phone(phone)
                    if auto_proxy:
                        proxy = auto_proxy
                        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ {proxy} –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {phone}")

                session_path = os.path.join(SESSIONS_DIR, session_name)
                client = Client(
                    session_path,
                    api_id=API_ID,
                    api_hash=API_HASH,
                    proxy=self._parse_proxy(proxy) if proxy else None,
                    no_updates=True,
                    takeout=False)
                await client.connect()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤—Ö–æ–¥–∞
            await asyncio.sleep(1)

            try:
                await client.sign_in(phone, phone_code_hash, clean_code)
            except Exception as sign_in_error:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(3)
                await client.sign_in(phone, phone_code_hash, clean_code)

            me = await client.get_me()
            session_path = os.path.join(SESSIONS_DIR, session_name)
            await self._save_account(phone, session_path, me.first_name, proxy, me.id, None, current_user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id –∏ current_user_id

            await client.disconnect()

            if session_name in self.pending_clients:
                del self.pending_clients[session_name]

            return {"status": "success", "name": me.first_name}

        except Exception as e:
            error_msg = str(e).lower()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}")

            if "phone_code_invalid" in error_msg or "invalid code" in error_msg:
                return {
                    "status":
                    "error",
                    "message":
                    "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥"
                }
            elif "phone_code_expired" in error_msg or "expired" in error_msg:
                return {
                    "status":
                    "error",
                    "message":
                    "–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"
                }
            elif "phone_code_empty" in error_msg or "empty" in error_msg:
                return {"status": "error", "message": "–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
            elif "session_password_needed" in error_msg or "password" in error_msg or "2fa" in error_msg:
                return {
                    "status": "password_required",
                    "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    "session_name": session_name
                }
            elif "flood" in error_msg:
                return {
                    "status": "error",
                    "message": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                }
            else:
                return {
                    "status": "error",
                    "message":
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥. –î–µ—Ç–∞–ª–∏: {str(e)}"
                }

    async def verify_password(self,
                              phone: str,
                              password: str,
                              session_name: str,
                              proxy: Optional[str] = None,
                              current_user_id: Optional[int] = None) -> Dict: # –î–æ–±–∞–≤–ª–µ–Ω current_user_id
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            client = self.pending_clients.get(session_name)

            if not client:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if not proxy:
                    from app.proxy_manager import proxy_manager
                    auto_proxy = proxy_manager.get_proxy_for_phone(phone)
                    if auto_proxy:
                        proxy = auto_proxy
                        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ {proxy} –¥–ª—è 2FA {phone}")

                session_path = os.path.join(SESSIONS_DIR, session_name)
                client = Client(
                    session_path,
                    api_id=API_ID,
                    api_hash=API_HASH,
                    proxy=self._parse_proxy(proxy) if proxy else None,
                    no_updates=True,
                    takeout=False)
                await client.connect()

            await client.check_password(password)
            me = await client.get_me()
            session_path = os.path.join(SESSIONS_DIR, session_name)
            await self._save_account(phone, session_path, me.first_name, proxy, me.id, None, current_user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id –∏ current_user_id
            await client.disconnect()

            if session_name in self.pending_clients:
                del self.pending_clients[session_name]

            return {"status": "success", "name": me.first_name}

        except Exception as e:
            if session_name in self.pending_clients:
                del self.pending_clients[session_name]
            return {"status": "error", "message": str(e)}

    async def add_account_from_session(self,
                                     session_file_path: str,
                                     proxy: Optional[str] = None,
                                     current_user_id: Optional[int] = None) -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ .session —Ñ–∞–π–ª–∞ Pyrogram"""
        import shutil
        import uuid
        
        try:
            print(f"üîÑ –ò–º–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ .session —Ñ–∞–π–ª–∞: {session_file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ .session —Ñ–∞–π–ª
            if not os.path.exists(session_file_path):
                return {"status": "error", "message": "–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            if not session_file_path.endswith('.session'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è .session —Ñ–∞–π–ª"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            file_size = os.path.getsize(session_file_path)
            if file_size == 0:
                return {"status": "error", "message": "–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø—É—Å—Ç–æ–π"}
            
            print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {file_size} –±–∞–π—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            temp_session_name = f"temp_session_{uuid.uuid4().hex[:8]}"
            temp_session_path = os.path.join(SESSIONS_DIR, temp_session_name)
            
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                shutil.copy2(session_file_path, f"{temp_session_path}.session")
                print(f"üìã –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not proxy:
                    from app.proxy_manager import proxy_manager
                    auto_proxy = proxy_manager.get_proxy_for_phone("session_import")
                    if auto_proxy:
                        proxy = auto_proxy
                        print(f"üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–∫—Å–∏ {proxy}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
                test_client = Client(
                    temp_session_path,
                    api_id=API_ID,
                    api_hash=API_HASH,
                    proxy=self._parse_proxy(proxy) if proxy else None,
                    no_updates=True
                )
                
                print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏...")
                await test_client.connect()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await test_client.get_me()
                
                if not me or not me.id:
                    await test_client.disconnect()
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–µ—Å—Å–∏–∏"}
                
                print(f"‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞: {me.first_name} ({me.phone_number})")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                phone_clean = me.phone_number.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                permanent_session_name = f"session_{phone_clean}"
                permanent_session_path = os.path.join(SESSIONS_DIR, permanent_session_name)
                
                await test_client.disconnect()
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                permanent_session_file = f"{permanent_session_path}.session"
                shutil.copy2(f"{temp_session_path}.session", permanent_session_file)
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {permanent_session_file}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_account(
                    phone=me.phone_number,
                    session_path=permanent_session_path,
                    name=me.first_name or "Session User",
                    proxy=proxy,
                    user_id=me.id,
                    session_data=None,  # –ë—É–¥–µ—Ç —Å—á–∏—Ç–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞
                    current_user_id=current_user_id
                )
                
                return {
                    "status": "success",
                    "name": me.first_name or "Session User",
                    "phone": me.phone_number
                }
                
            except Exception as e:
                error_msg = str(e)
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {error_msg}")
                
                if "AUTH_KEY_UNREGISTERED" in error_msg:
                    return {"status": "error", "message": "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞"}
                elif "SESSION_PASSWORD_NEEDED" in error_msg:
                    return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {error_msg}"}
                    
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    temp_file = f"{temp_session_path}.session"
                    if os.path.exists(temp_file):
                        os.remove(temp_file)
                        print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                except Exception as cleanup_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_error}")
                    
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ .session: {error_msg}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {error_msg}"}

    async def add_account_from_tdata(self,
                                   tdata_path: str,
                                   proxy: Optional[str] = None,
                                   current_user_id: Optional[int] = None) -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ TDATA –ø–∞–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ñ–∞–π–ª–æ–≤"""
        import shutil
        import traceback
        import struct
        import sqlite3
        import json
        from pathlib import Path

        try:
            print(f"üîÑ –ò–º–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ TDATA: {tdata_path}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not tdata_path or not isinstance(tdata_path, str):
                return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ TDATA"}

            if not os.path.exists(tdata_path):
                print(f"‚ùå TDATA –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {tdata_path}")
                return {"status": "error", "message": "TDATA –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

            if not os.path.isdir(tdata_path):
                print(f"‚ùå –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {tdata_path}")
                return {"status": "error", "message": "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
            try:
                tdata_files = os.listdir(tdata_path)
                print(f"üìÅ –§–∞–π–ª—ã –≤ TDATA –ø–∞–ø–∫–µ: {tdata_files}")
            except Exception as list_error:
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {str(list_error)}"}

            if not tdata_files:
                return {"status": "error", "message": "TDATA –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è"}

            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã TDATA
            key_files = []
            map_files = []
            settings_file = None

            for file_name in tdata_files:
                if file_name.startswith("key_data"):
                    key_files.append(file_name)
                elif file_name.startswith("map"):
                    map_files.append(file_name)
                elif file_name == "settings0":
                    settings_file = file_name

            print(f"üîç Key files: {key_files}")
            print(f"üîç Map files: {len(map_files)} —Ñ–∞–π–ª–æ–≤")
            print(f"üîç Settings file: {settings_file}")

            if not key_files:
                return {"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª key_data –≤ TDATA"}

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Pyrogram
            import uuid
            temp_session_name = f"tdata_{uuid.uuid4().hex[:8]}"
            temp_session_dir = os.path.join(SESSIONS_DIR, f"temp_{temp_session_name}")

            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                os.makedirs(temp_session_dir, exist_ok=True)

                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ TDATA —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                for file_name in tdata_files:
                    src_file = os.path.join(tdata_path, file_name)
                    dst_file = os.path.join(temp_session_dir, file_name)

                    if os.path.isfile(src_file):
                        shutil.copy2(src_file, dst_file)
                        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_name}")

                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç, —É–∫–∞–∑–∞–≤ TDATA –ø–∞–ø–∫—É –∫–∞–∫ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                print(f"üîÑ –°–æ–∑–¥–∞–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç —Å TDATA...")

                client = Client(
                    name=temp_session_name,
                    api_id=API_ID,
                    api_hash=API_HASH,
                    workdir=temp_session_dir,
                    proxy=self._parse_proxy(proxy) if proxy else None,
                    no_updates=True,
                    in_memory=False
                )

                print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                await client.connect()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                try:
                    me = await client.get_me()

                    if me and me.id:
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {me.first_name} ({me.phone_number})")

                        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                        phone_clean = me.phone_number.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                        permanent_session_name = f"session_{phone_clean}"
                        permanent_session_path = os.path.join(SESSIONS_DIR, permanent_session_name)

                        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        await client.disconnect()

                        # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                        temp_session_file = os.path.join(temp_session_dir, f"{temp_session_name}.session")

                        if os.path.exists(temp_session_file):
                            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                            permanent_session_file = f"{permanent_session_path}.session"
                            shutil.copy2(temp_session_file, permanent_session_file)
                            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {permanent_session_file}")

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            await self._save_account(
                                phone=me.phone_number,
                                session_path=permanent_session_path,
                                name=me.first_name or "TDATA User",
                                proxy=proxy,
                                user_id=me.id,
                                session_data=None,  # –ë—É–¥–µ—Ç —Å—á–∏—Ç–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞
                                current_user_id=current_user_id
                            )

                            return {
                                "status": "success",
                                "name": me.first_name or "TDATA User",
                                "phone": me.phone_number
                            }
                        else:
                            return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏"}
                    else:
                        await client.disconnect()
                        return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"}

                except Exception as auth_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_error}")
                    try:
                        await client.disconnect()
                    except:
                        pass

                    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    return await self._try_alternative_tdata_import(tdata_path, proxy, current_user_id)

            except Exception as client_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
                return await self._try_alternative_tdata_import(tdata_path, proxy, current_user_id)

            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                try:
                    if os.path.exists(temp_session_dir):
                        shutil.rmtree(temp_session_dir)
                        print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞")
                except Exception as cleanup_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_error}")

        except Exception as e:
            error_msg = str(e)
            error_trace = traceback.format_exc()
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TDATA: {error_msg}")
            print(f"üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {error_trace}")

            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TDATA: {error_msg}"}

    async def _try_alternative_tdata_import(self, tdata_path: str, proxy: Optional[str], current_user_id: Optional[int]) -> Dict:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞ TDATA –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        import uuid
        import shutil

        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞ TDATA...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏
            temp_name = f"alt_tdata_{uuid.uuid4().hex[:8]}"
            temp_session_path = os.path.join(SESSIONS_DIR, temp_name)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ TDATA
            client = Client(
                name=temp_name,
                api_id=API_ID,
                api_hash=API_HASH,
                proxy=self._parse_proxy(proxy) if proxy else None,
                no_updates=True,
                workdir=SESSIONS_DIR
            )

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
            await client.connect()

            # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–∞ TDATA
            await client.disconnect()

            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã TDATA
            tdata_files = os.listdir(tdata_path)
            key_data_file = None

            for file_name in tdata_files:
                if file_name.startswith("key_data"):
                    key_data_file = os.path.join(tdata_path, file_name)
                    break

            if not key_data_file or not os.path.exists(key_data_file):
                return {"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª key_data"}

            # –ö–æ–ø–∏—Ä—É–µ–º TDATA —Ñ–∞–π–ª—ã –∫–∞–∫ —Å–µ—Å—Å–∏—é
            session_file = f"{temp_session_path}.session"

            # –ß–∏—Ç–∞–µ–º key_data
            with open(key_data_file, 'rb') as f:
                key_data = f.read()

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é SQLite —Å–µ—Å—Å–∏—é –¥–ª—è Pyrogram
            import sqlite3

            conn = sqlite3.connect(session_file)
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Å—Å–∏–∏ Pyrogram
            cursor.execute('''
                CREATE TABLE sessions (
                    id INTEGER PRIMARY KEY,
                    dc_id INTEGER PRIMARY KEY,
                    server_address TEXT,
                    port INTEGER,
                    auth_key BLOB,
                    date INTEGER,
                    user_id INTEGER,
                    is_bot INTEGER
                )
            ''')

            cursor.execute('''
                CREATE TABLE peers (
                    id INTEGER PRIMARY KEY,
                    access_hash INTEGER,
                    type INTEGER,
                    username TEXT,
                    phone_number TEXT
                )
            ''')

            cursor.execute('''
                CREATE TABLE version (
                    number INTEGER PRIMARY KEY
                )
            ''')

            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
            cursor.execute('INSERT INTO version VALUES (?)', (4,))

            # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
            cursor.execute('''
                INSERT INTO sessions (dc_id, server_address, port, auth_key, date, user_id, is_bot) VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (2, 'telegram.org', 443, key_data[:256] if len(key_data) > 256 else key_data, 0, 0, 0))

            conn.commit()
            conn.close()

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏–∑ TDATA")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
            test_client = Client(
                name=temp_name,
                api_id=API_ID,
                api_hash=API_HASH,
                proxy=self._parse_proxy(proxy) if proxy else None,
                no_updates=True,
                workdir=SESSIONS_DIR
            )

            try:
                await test_client.connect()
                me = await test_client.get_me()

                if me and me.id:
                    print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω: {me.first_name}")

                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    phone_clean = me.phone_number.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                    final_session_name = f"session_{phone_clean}"
                    final_session_path = os.path.join(SESSIONS_DIR, final_session_name)

                    await test_client.disconnect()

                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                    shutil.copy2(session_file, f"{final_session_path}.session")

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(session_file)
                    except:
                        pass

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await self._save_account(
                        phone=me.phone_number,
                        session_path=final_session_path,
                        name=me.first_name or "TDATA User",
                        proxy=proxy,
                        user_id=me.id,
                        session_data=None,
                        current_user_id=current_user_id
                    )

                    return {
                        "status": "success",
                        "name": me.first_name or "TDATA User",
                        "phone": me.phone_number
                    }
                else:
                    await test_client.disconnect()
                    return {"status": "error", "message": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"}

            except Exception as test_error:
                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {test_error}")
                try:
                    await test_client.disconnect()
                except:
                    pass

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.remove(session_file)
                except:
                    pass

                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TDATA. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏"}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
            return {"status": "error", "message": f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}"}

    async def _save_account(self, phone: str, session_path: str, name: str, proxy: Optional[str], user_id: int, session_data: Optional[str], current_user_id: Optional[int]): # –î–æ–±–∞–≤–ª–µ–Ω—ã user_id –∏ current_user_id
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        db = next(get_db())
        try:
            session_file_path = f"{session_path}.session"

            if not os.path.exists(session_file_path):
                raise Exception(f"Session file not found: {session_file_path}")

            if session_data is None: # –ï—Å–ª–∏ session_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
                with open(session_file_path, "rb") as f:
                    session_data = f.read()

            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
            if isinstance(session_data, bytes):
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –±–∞–π—Ç–∞—Ö (–∏–∑ —Ñ–∞–π–ª–∞), —à–∏—Ñ—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
                encrypted_session = self.cipher.encrypt(session_data).decode()
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, —Å–Ω–∞—á–∞–ª–∞ –∫–æ–¥–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
                try:
                    encrypted_session = self.cipher.encrypt(session_data.encode()).decode()
                except Exception:
                    import base64
                    encrypted_session = base64.b64encode(session_data.encode()).decode()

            existing_account = db.query(Account).filter(
                Account.phone == phone).first()
            if existing_account:
                existing_account.name = name
                existing_account.session_data = encrypted_session
                existing_account.proxy = proxy
                existing_account.status = "online"
                existing_account.is_active = True
                existing_account.user_id = current_user_id if current_user_id else user_id # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_user_id –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
            else:
                account = Account(
                    phone=phone,
                    name=name,
                    session_data=encrypted_session,
                    proxy=proxy,
                    status="online",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "online" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    is_active=True,
                    user_id=current_user_id if current_user_id else user_id # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_user_id –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
                )
                db.add(account)

            db.commit()

        except Exception as save_error:
            db.rollback()
            raise save_error
        finally:
            db.close()

    def _parse_proxy(self, proxy_string: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        if not proxy_string:
            return None

        parts = proxy_string.split("://")
        if len(parts) != 2:
            return None

        scheme = parts[0].lower()
        rest = parts[1]

        if "@" in rest:
            auth, address = rest.split("@", 1)
            username, password = auth.split(":", 1)
        else:
            username = password = None
            address = rest

        host, port = address.split(":", 1)

        return {
            "scheme": scheme,
            "hostname": host,
            "port": int(port),
            "username": username,
            "password": password
        }

    async def _get_client_for_account(self,
                                      account_id: int) -> Optional[Client]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–ª–∏–µ–Ω—Ç–æ–≤
        if account_id in self.clients:
            client = self.clients[account_id]
            if hasattr(client, 'is_connected') and client.is_connected:
                return client
            else:
                del self.clients[account_id]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        db = next(get_db())
        try:
            account = db.query(Account).filter(
                Account.id == account_id).first()
            if not account or not account.is_active:
                return None

            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
            phone_clean = account.phone.replace('+', '').replace(
                ' ', '').replace('(', '').replace(')', '').replace('-', '')
            
            session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}")
            if not os.path.exists(f"{session_file}.session"):
                return None

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –±—ã—Å—Ç—Ä—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            client = Client(session_file,
                            api_id=API_ID,
                            api_hash=API_HASH,
                            proxy=self._parse_proxy(account.proxy) if account.proxy else None,
                            sleep_threshold=30,
                            max_concurrent_transmissions=2,
                            no_updates=True,
                            workers=1)

            # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                await asyncio.wait_for(client.connect(), timeout=10)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è client.me –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä–æ
                try:
                    me = await asyncio.wait_for(client.get_me(), timeout=5)
                    client.me = me
                except (asyncio.TimeoutError, FloodWait):
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name=account.name or "User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

                self.clients[account_id] = client
                return client

            except Exception as e:
                try:
                    await client.disconnect()
                except:
                    pass
                return None

        except Exception as e:
            return None
        finally:
            db.close()

    async def get_user_contacts(self, account_id: int) -> dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import traceback
        try:
            print(f"üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")

            client = await self._get_client_for_account(account_id)
            if not client:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not client.is_connected:
                print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            try:
                me = await client.get_me()
                if not me:
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"}
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
            except Exception as auth_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_error}")
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(auth_error)}"}

            contacts_list = []

            try:
                print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
                contacts = await client.get_contacts()
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ API")

            except Exception as e:
                error_msg = str(e)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {error_msg}")
                print(traceback.format_exc())

                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏
                print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏...")
                try:
                    async for dialog in client.get_dialogs(limit=100):
                        chat = dialog.chat
                        if hasattr(chat, 'type') and 'PRIVATE' in str(chat.type):
                            if chat.id != me.id:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
                                contact_data = {
                                    "id": chat.id,
                                    "first_name": getattr(chat, "first_name", "") or "",
                                    "last_name": getattr(chat, "last_name", "") or "",
                                    "username": getattr(chat, "username", "") or "",
                                    "phone": "",
                                    "is_bot": bool(getattr(chat, "is_bot", False)),
                                    "is_verified": bool(getattr(chat, "is_verified", False)),
                                    "is_premium": bool(getattr(chat, "is_premium", False)),
                                    "display_name": f"{getattr(chat, 'first_name', '')} {getattr(chat, 'last_name', '')}".strip() or getattr(chat, 'username', '') or f"User {chat.id}"
                                }
                                contacts_list.append(contact_data)

                    print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(contacts_list)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏")

                    if contacts_list:
                        return {
                            "status": "success",
                            "contacts": contacts_list,
                            "count": len(contacts_list)
                        }
                    else:
                        return {"status": "error", "message": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

                except Exception as dialog_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {dialog_error}")
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {error_msg}"}

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            for contact in contacts:
                if contact is None:
                    continue

                try:
                    first_name = getattr(contact, "first_name", "") or ""
                    last_name = getattr(contact, "last_name", "") or ""
                    username = getattr(contact, "username", "") or ""
                    contact_id = getattr(contact, "id", None)

                    if contact_id and contact_id != me.id:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
                        contact_data = {
                            "id": contact_id,
                            "first_name": first_name,
                            "last_name": last_name,
                            "username": username,
                            "phone": getattr(contact, "phone_number", "") or "",
                            "is_bot": bool(getattr(contact, "is_bot", False)),
                            "is_verified": bool(getattr(contact, "is_verified", False)),
                            "is_premium": bool(getattr(contact, "is_premium", False)),
                            "display_name": f"{first_name} {last_name}".strip() or username or f"User {contact_id}"
                        }
                        contacts_list.append(contact_data)

                except Exception as ce:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {ce}")
                    continue

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(contacts_list)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

            if not contacts_list:
                return {"status": "error", "message": "–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"}

            return {
                "status": "success",
                "contacts": contacts_list,
                "count": len(contacts_list)
            }

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {error_msg}")
            print(traceback.format_exc())
            return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: {error_msg}"}

    async def get_user_dialogs(self, account_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        try:
            print(f"=== –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} ===")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {
                    "status": "error",
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"
                }

            contacts = []

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
                me = await client.get_me()
                print(f"–ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è: {me.first_name}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                dialog_count = 0
                async for dialog in client.get_dialogs(limit=50):
                    dialog_count += 1
                    chat = dialog.chat

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —á–∞—Ç—ã –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
                    if chat.id == me.id or chat.id == 777000:
                        continue

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
                    if hasattr(chat, 'type') and 'PRIVATE' in str(chat.type):
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                        first_name = getattr(chat, 'first_name', '') or ''
                        last_name = getattr(chat, 'last_name', '') or ''
                        username = getattr(chat, 'username', '') or ''

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        display_name = f"{first_name} {last_name}".strip()
                        if not display_name and username:
                            display_name = f"@{username}"
                        elif not display_name:
                            display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat.id}"

                        contact_info = {
                            "id": chat.id,
                            "first_name": first_name,
                            "last_name": last_name,
                            "username": username,
                            "display_name": display_name
                        }

                        contacts.append(contact_info)
                        print(f"‚úì –ö–æ–Ω—Ç–∞–∫—Ç: {display_name}")

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    if dialog_count >= 30:
                        break

                print(
                    f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {dialog_count} –¥–∏–∞–ª–æ–≥–æ–≤"
                )

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await client.disconnect()

                return {
                    "status": "success",
                    "contacts": contacts,
                    "total": len(contacts)
                }

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {str(e)}")
                await client.disconnect()
                return {
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {str(e)}"
                }

        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}")
            return {"status": "error", "message": str(e)}

    async def get_user_chats(self, account_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            print(f"=== –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} ===")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {
                    "status": "error",
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"
                }

            chats = {"groups": [], "channels": [], "private": []}

            try:
                dialog_count = 0
                async for dialog in client.get_dialogs(limit=30):
                    dialog_count += 1
                    chat = dialog.chat

                    if hasattr(chat, 'type'):
                        chat_type = str(chat.type)

                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                        if hasattr(chat, 'title'):
                            title = chat.title
                        else:
                            first_name = getattr(chat, 'first_name', '') or ''
                            last_name = getattr(chat, 'last_name', '') or ''
                            title = f"{first_name} {last_name}".strip(
                            ) or f"Chat {chat.id}"

                        chat_data = {
                            "id": chat.id,
                            "title": title,
                            "username": getattr(chat, 'username', '') or ''
                        }

                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø–∞–º
                        if 'PRIVATE' in chat_type:
                            chats["private"].append(chat_data)
                        elif 'GROUP' in chat_type:
                            chats["groups"].append(chat_data)
                        elif 'CHANNEL' in chat_type:
                            chats["channels"].append(chat_data)

                print(
                    f"‚úì –ù–∞–π–¥–µ–Ω–æ: {len(chats['private'])} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö, {len(chats['groups'])} –≥—Ä—É–ø–ø, {len(chats['channels'])} –∫–∞–Ω–∞–ª–æ–≤"
                )

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await client.disconnect()

                return {"status": "success", "chats": chats}

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {str(e)}")
                await client.disconnect()
                return {"status": "error", "message": str(e)}

        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {str(e)}")
            return {"status": "error", "message": str(e)}

    async def cleanup_client(self, account_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if account_id in self.clients:
            client = self.clients[account_id]
            try:
                await client.stop()
            except:
                pass
            del self.clients[account_id]

    async def disconnect_client(self, account_id: int) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if account_id in self.clients:
                client = self.clients[account_id]
                try:
                    if hasattr(client, 'is_connected') and client.is_connected:
                        await client.disconnect()
                except Exception as disconnect_error:
                    print(
                        f"Error during disconnect for client {account_id}: {disconnect_error}"
                    )
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–∂–µ –µ—Å–ª–∏ disconnect –Ω–µ —É–¥–∞–ª—Å—è

                del self.clients[account_id]
                return True
        except Exception as e:
            print(f"Error disconnecting client {account_id}: {e}")
        return False

    async def send_file(
            self,
            account_id: int,
            chat_id: str,
            file_path: str,
            caption: str = "",
            chunk_size: int = 10 * 1024 * 1024  # 10MB chunks
    ) -> Dict:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞: {file_path}")
            print(f"üìã –ê–∫–∫–∞—É–Ω—Ç ID: {account_id}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {chat_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return {"status": "error", "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            file_size = os.path.getsize(file_path)
            file_name = os.path.basename(file_path)
            print(f"üìÅ –§–∞–π–ª: {file_name}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            print(f"üîå –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...")
            client = await self._get_client_for_account(account_id)

            if not client:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                return {
                    "status": "error",
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"
                }

            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            if not client.is_connected:
                print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç...")
                await client.connect()
                print("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                me = await client.get_me()
                if not me:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return {
                        "status": "error",
                        "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
                    }

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º client.me –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Pyrogram
                client.me = me
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} ({me.id})")
            except Exception as auth_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_error}")
                return {
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(auth_error)}"
                }

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id
            target_chat_id = chat_id
            if isinstance(chat_id, str):
                if chat_id.startswith('@'):
                    target_chat_id = chat_id
                elif chat_id.isdigit():
                    target_chat_id = int(chat_id)
                elif chat_id.startswith('-') and chat_id[1:].isdigit():
                    target_chat_id = int(chat_id)

            print(f"üéØ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {target_chat_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            try:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...")

                # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if file_size > 2 * 1024 * 1024 * 1024:  # 2GB
                    print("üì¶ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥")
                    return await self._send_large_file_improved(
                        client, target_chat_id, file_path, caption)

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                sent_msg = await client.send_document(
                    chat_id=target_chat_id,
                    document=file_path,
                    caption=caption if caption else "",
                    force_document=True,
                    disable_notification=False)

                if sent_msg and hasattr(sent_msg, 'id'):
                    print(
                        f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! Message ID: {sent_msg.id}")
                    return {
                        "status": "success",
                        "message_id": sent_msg.id,
                        "file_name": file_name,
                        "file_size": file_size
                    }
                else:
                    print("‚ùå –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return {
                        "status": "error",
                        "message": "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è"
                    }

            except Exception as send_error:
                error_msg = str(send_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {error_msg}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if "PEER_ID_INVALID" in error_msg:
                    return {
                        "status": "error",
                        "message": f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    }
                elif "FILE_PARTS_INVALID" in error_msg:
                    return {
                        "status": "error",
                        "message": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã Telegram"
                    }
                elif "DOCUMENT_INVALID" in error_msg:
                    return {
                        "status": "error",
                        "message": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
                    }
                elif "FLOOD_WAIT" in error_msg:
                    return {
                        "status": "error",
                        "message": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    }
                else:
                    return {
                        "status": "error",
                        "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}"
                    }

        except Exception as general_error:
            error_msg = str(general_error)
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ send_file: {error_msg}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {error_msg}"}

    async def send_message(self, account_id: int, recipient: str, message: str, file_path: str = None, schedule_seconds: int = 0) -> dict:
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è/—Ñ–∞–π–ª–∞"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not client.is_connected:
                try:
                    await asyncio.wait_for(client.connect(), timeout=10)
                except Exception:
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"}

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if not recipient.startswith('@') and not recipient.startswith('+') and not recipient.isdigit() and not recipient.startswith('-'):
                recipient = f"@{recipient}"
            
            target_id = recipient if not recipient.isdigit() else int(recipient)
            
            schedule_date = None
            if schedule_seconds > 0:
                from datetime import datetime, timedelta
                schedule_date = datetime.utcnow() + timedelta(seconds=schedule_seconds)

            # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            if file_path and os.path.exists(file_path):
                try:
                    sent = await client.send_document(
                        chat_id=target_id,
                        document=file_path,
                        caption=message or "",
                        force_document=True,
                        schedule_date=schedule_date
                    )
                    return {
                        "status": "success",
                        "message_id": getattr(sent, "id", None)
                    }
                except Exception as e:
                    return {"status": "error", "message": str(e)}
            
            # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            else:
                try:
                    sent = await client.send_message(
                        chat_id=target_id,
                        text=message or "",
                        schedule_date=schedule_date
                    )
                    return {
                        "status": "success",
                        "message_id": getattr(sent, "id", None)
                    }
                except Exception as e:
                    return {"status": "error", "message": str(e)}
        except Exception as e:
            return {"status": "error", "message": str(e)}

    async def send_message_scheduled_lightning(self, account_id: int, recipient: str, message: str, file_path: str = None, schedule_seconds: int = 0) -> dict:
        """‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ scheduled API –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –°—É–ø–µ—Ä–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not client.is_connected:
                try:
                    await asyncio.wait_for(client.connect(), timeout=5)
                except Exception:
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"}

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if not recipient.startswith('@') and not recipient.startswith('+') and not recipient.isdigit() and not recipient.startswith('-'):
                recipient = f"@{recipient}"
            
            target_id = recipient if not recipient.isdigit() else int(recipient)
            
            # ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º scheduled API –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–∞—Ä–∞–¥–æ–∫—Å, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ)
            from datetime import datetime, timedelta
            schedule_date = datetime.utcnow() + timedelta(seconds=1)  # –ü–æ—á—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ

            # ‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            if file_path and os.path.exists(file_path):
                try:
                    sent = await client.send_document(
                        chat_id=target_id,
                        document=file_path,
                        caption=message or "",
                        force_document=True,
                        schedule_date=schedule_date,
                        disable_notification=False  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
                    )
                    return {
                        "status": "success", 
                        "message_id": getattr(sent, "id", None)
                    }
                except Exception as e:
                    # –û—Ç–∫–∞—Ç –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ scheduled
                    try:
                        sent = await client.send_document(
                            chat_id=target_id,
                            document=file_path,
                            caption=message or "",
                            force_document=True
                        )
                        return {
                            "status": "success",
                            "message_id": getattr(sent, "id", None)
                        }
                    except Exception as e2:
                        return {"status": "error", "message": str(e2)}
            
            # ‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            else:
                try:
                    sent = await client.send_message(
                        chat_id=target_id,
                        text=message or "",
                        schedule_date=schedule_date,
                        disable_notification=False  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
                    )
                    return {
                        "status": "success",
                        "message_id": getattr(sent, "id", None)
                    }
                except Exception as e:
                    # –û—Ç–∫–∞—Ç –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ scheduled
                    try:
                        sent = await client.send_message(
                            chat_id=target_id,
                            text=message or ""
                        )
                        return {
                            "status": "success",
                            "message_id": getattr(sent, "id", None)
                        }
                    except Exception as e2:
                        return {"status": "error", "message": str(e2)}
                        
        except Exception as e:
            return {"status": "error", "message": str(e)}

    async def _send_text_only(self,
                              client,
                              target_id,
                              text: str,
                              schedule_date=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            kwargs = {"chat_id": target_id, "text": text}
            if schedule_date:
                kwargs["schedule_date"] = schedule_date

            sent_message = await client.send_message(**kwargs)
            print(f"‚úì –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {text[:50]}...")
            return sent_message

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            raise e

    async def _send_large_file_improved(self, client, chat_id, file_path: str,
                                        caption: str):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_path}")

            # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 2GB –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            sent_msg = await client.send_document(
                chat_id=chat_id,
                document=file_path,
                caption=caption if caption else "",
                force_document=True,
                thumb=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é
                disable_notification=False)

            if sent_msg and hasattr(sent_msg, 'id'):
                print(f"‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! ID: {sent_msg.id}")
                return {
                    "status": "success",
                    "message_id": sent_msg.id,
                    "file_name": os.path.basename(file_path),
                    "file_size": os.path.getsize(file_path)
                }
            else:
                return {
                    "status": "error",
                    "message": "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è"
                }

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {error_msg}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {error_msg}"
            }

    async def _update_account_stats(self, account_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        db = next(get_db())
        try:
            account = db.query(Account).filter(
                Account.id == account_id).first()
            if account:
                now = datetime.utcnow()
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if account.last_message_time and (
                        now - account.last_message_time).total_seconds() < 1:
                    await asyncio.sleep(
                        1 - (now - account.last_message_time).total_seconds())

                account.messages_sent_today += 1
                account.messages_sent_hour += 1
                account.last_message_time = datetime.utcnow()
                db.commit()
        except Exception as e:
            db.rollback()
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        finally:
            db.close()

    async def _handle_auth_key_unregistered(self, account_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ AUTH_KEY_UNREGISTERED"""
        try:
            print(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")

            # –û—Ç–∫–ª—é—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.disconnect_client(account_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if account:
                    account.status = "error"
                    account.is_active = False
                    db.commit()
                    print(f"üîÑ –ê–∫–∫–∞—É–Ω—Ç {account_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            finally:
                db.close()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")

    async def delete_telegram_account(self, account_id: int, reason: str = "–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω") -> Dict:
        """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ Telegram"""
        try:
            print(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∏–∑ Telegram")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            try:
                me = await client.get_me()
                user_info = f"{me.first_name} ({me.phone_number})"
                print(f"üì± –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç: {user_info}")
            except Exception as e:
                user_info = f"Account ID {account_id}"
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ API Telegram
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                from pyrogram.raw import functions

                await client.invoke(
                    functions.account.DeleteAccount(reason=reason)
                )

                print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {user_info} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Telegram")

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await client.disconnect()

                # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø–∞–º—è—Ç–∏
                if account_id in self.clients:
                    del self.clients[account_id]

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                await self._cleanup_account_files(account_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await self._mark_account_as_deleted(account_id)

                return {
                    "status": "success",
                    "message": f"–ê–∫–∫–∞—É–Ω—Ç {user_info} —É–¥–∞–ª–µ–Ω –∏–∑ Telegram",
                    "deleted_account": user_info
                }

            except Exception as delete_error:
                error_msg = str(delete_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_msg}")

                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if "ACCOUNT_DELETE_DISABLED" in error_msg:
                    return {"status": "error", "message": "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram"}
                elif "ACCOUNT_DELETE_BLOCKED" in error_msg:
                    return {"status": "error", "message": "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã)"}
                elif "TWO_FA_REQUIRED" in error_msg:
                    return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {error_msg}"}

        except Exception as general_error:
            error_msg = str(general_error)
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {error_msg}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {error_msg}"}

    async def _cleanup_account_files(self, account_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if account:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
                    phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                    session_names = [f"session_{phone_clean}", f"session_{account.phone}", phone_clean]

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
                    for session_name in session_names:
                        session_file = os.path.join(SESSIONS_DIR, f"{session_name}.session")
                        if os.path.exists(session_file):
                            try:
                                os.remove(session_file)
                                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
                            except Exception as e:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
            finally:
                db.close()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")

    async def _mark_account_as_deleted(self, account_id: int):
        """–ü–æ–º–µ—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if account:
                    account.status = "deleted"
                    account.is_active = False
                    account.session_data = None  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    db.commit()
                    print(f"üìù –ê–∫–∫–∞—É–Ω—Ç {account_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            finally:
                db.close()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")

    async def send_post_comment(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞ –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"""
        try:
            print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞ –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'...")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            try:
                me = await client.get_me()
                client.me = me
                print(f"üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –∏–º–µ–Ω–∏: {me.first_name}")
            except Exception:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")

            print(f"üéØ –ö–∞–Ω–∞–ª: {chat_id}, –ø–æ—Å—Ç ID: {message_id}")
            print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            try:
                # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å reply_to_message_id
                print("üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
                sent_message = await client.send_message(
                    chat_id=chat_id,
                    text=comment,
                    reply_to_message_id=message_id
                )

                if sent_message:
                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º! ID: {sent_message.id}")
                    return {"status": "success", "message_id": sent_message.id}

            except Exception as e1:
                error_msg = str(e1)
                print(f"‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {error_msg}")

                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–∞–≤–∞–º–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
                if "CHAT_WRITE_FORBIDDEN" in error_msg or "CHAT_ADMIN_REQUIRED" in error_msg:
                    try:
                        # –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å raw API
                        print("üîÑ –ü—Ä–æ–±—É–µ–º raw API...")
                        from pyrogram.raw import functions, types

                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputReplyToMessage –¥–ª—è Pyrogram v2.x
                        reply_to = types.InputReplyToMessage(
                            reply_to_msg_id=message_id
                        )

                        result = await client.invoke(
                            functions.messages.SendMessage(
                                peer=await client.resolve_peer(chat_id),
                                message=comment,
                                reply_to=reply_to,
                                random_id=client.rnd_id()
                            )
                        )

                        if result:
                            message_id = result.id if hasattr(result, 'id') else result.updates[0].id
                            print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ raw API! ID: {message_id}")
                            return {"status": "success", "message_id": message_id}

                    except Exception as e2:
                        print(f"‚ùå Raw API —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e2)}")

                        # –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
                        try:
                            print("üîÑ –ò—â–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞...")

                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                            chat = await client.get_chat(chat_id)

                            if hasattr(chat, 'linked_chat') and chat.linked_chat:
                                discussion_group_id = chat.linked_chat.id
                                print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                if sent_message:
                                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π! ID: {sent_message.id}")
                                    return {"status": "success", "message_id": sent_message.id}
                            else:
                                print("‚ùå –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                return {"status": "error", "message": "–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"}

                        except Exception as e3:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {str(e3)}")
                            return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e3)}"}
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç: {str(e1)}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    try:
                        from app.database import CommentLog, get_db
                        db = next(get_db())

                        comment_log = CommentLog(
                            account_id=account_id,
                            chat_id=chat_id,
                            message_id=message_id,
                            comment=comment,
                            status="failed",
                            error_message=str(e1)
                        )
                        db.add(comment_log)
                        db.commit()
                        db.close()
                        print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é: ID {comment_log.id}")
                    except Exception as log_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {log_error}")

                    return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç: {str(e1)}"}

        except Exception as general_error:
            error_msg = str(general_error)
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {error_msg}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            try:
                from app.database import CommentLog, get_db
                db = next(get_db())

                comment_log = CommentLog(
                    account_id=account_id,
                    chat_id=chat_id,
                    message_id=message_id,
                    comment=comment,
                    status="failed",
                    error_message=str(general_error)
                )
                db.add(comment_log)
                db.commit()
                db.close()
                print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é: ID {comment_log.id}")
            except Exception as log_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {log_error}")

            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {error_msg}"}

    async def _send_comment_telethon_only(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ Telethon —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Å—Å–∏–π"""
        try:
            print(f"üì± Telethon: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                try:
                    from telethon import TelegramClient
                    from telethon.sessions import StringSession
                    print(f"‚úÖ Telethon –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError:
                    print(f"‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon"}

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —á–∏—Å—Ç—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                import uuid
                unique_session_name = f"telethon_comment_{uuid.uuid4().hex[:8]}"
                telethon_session_file = os.path.join(SESSIONS_DIR, unique_session_name)

                print(f"üîó Telethon: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é: {telethon_session_file}.session")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ Pyrogram —Å–µ—Å—Å–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                if not os.path.exists(pyrogram_session_file):
                    print(f"‚ùå Telethon: –§–∞–π–ª Pyrogram —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {pyrogram_session_file}")
                    return {"status": "error", "message": "Telethon: Pyrogram —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —á–∏—Å—Ç—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                try:
                    await self._create_clean_telethon_session(pyrogram_session_file, telethon_session_file)
                except Exception as convert_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {convert_error}")
                    return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: {str(convert_error)}"}

                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    print(f"‚úÖ Telethon: –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç...")
                    telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)

                except Exception as client_create_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_create_error}")
                    return {"status": "error", "message": f"Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {str(client_create_error)}"}

                try:
                    print(f"üîå Telethon: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                    await telethon_client.start()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.phone})")

                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è Telethon
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                        print(f"üéØ Telethon: –¶–µ–ª—å –ø–æ username: {target_entity}")
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                        print(f"üéØ Telethon: –¶–µ–ª—å –ø–æ ID: {target_entity}")
                    else:
                        target_entity = chat_id
                        print(f"üéØ Telethon: –¶–µ–ª—å –∫–∞–∫ –µ—Å—Ç—å: {target_entity}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ
                    try:
                        entity = await telethon_client.get_entity(target_entity)
                        print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å - {type(entity).__name__}")

                        # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç
                        if hasattr(entity, 'broadcast') and entity.broadcast:
                            print(f"üì∫ Telethon: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç...")

                            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é –ø–æ–¥ –ø–æ—Å—Ç {message_id}
                            try:
                                print(f"üîç Telethon: –ú–µ—Ç–æ–¥ 1 - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç {message_id}...")

                                await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ reply –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                                sent_message = await telethon_client.send_message(
                                    entity=entity,
                                    message=comment,
                                    reply_to=message_id
                                )

                                print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç! ID: {sent_message.id}")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }

                            except Exception as direct_error:
                                error_str = str(direct_error)
                                print(f"‚ö†Ô∏è Telethon: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")

                                # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ reactions API
                                if "CHAT_WRITE_FORBIDDEN" in error_str or "CHAT_ADMIN_REQUIRED" in error_str:
                                    print(f"üîç Telethon: –ú–µ—Ç–æ–¥ 2 - –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Reactions API...")

                                    try:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SendReaction –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
                                        from telethon.tl.functions.messages import SendReactionRequest
                                        from telethon.tl.types import ReactionEmoji, ReactionCustomEmoji

                                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
                                        await telethon_client(SendReactionRequest(
                                            peer=entity,
                                            msg_id=message_id,
                                            reaction=[ReactionEmoji(emoticon="üí¨")]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                        ))

                                        print(f"‚úÖ Telethon: –†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –ø–æ—Å—Ç! (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ —Ä–µ–∞–∫—Ü–∏—è)")
                                        return {
                                            "status": "success",
                                            "message": "–†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –ø–æ—Å—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)",
                                            "message_id": f"reaction_{message_id}"
                                        }

                                    except Exception as reaction_error:
                                        print(f"‚ö†Ô∏è Telethon: –†–µ–∞–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {reaction_error}")

                                        # –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º —Ç—Ä–µ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä—è–º—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                                        print(f"üîç Telethon: –ú–µ—Ç–æ–¥ 3 - –ò—â–µ–º —Ç—Ä–µ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...")

                                        try:
                                            from telethon.tl.functions.messages import GetDiscussionMessageRequest

                                            discussion_result = await telethon_client(GetDiscussionMessageRequest(
                                                peer=entity,
                                                msg_id=message_id
                                            ))

                                            if discussion_result and hasattr(discussion_result, 'messages') and len(discussion_result.messages) >= 2:
                                                discussion_head = discussion_result.messages[1]
                                                discussion_chat = discussion_result.chats[0] if discussion_result.chats else None

                                                if discussion_chat and discussion_head:
                                                    print(f"üì¢ Telethon: –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ {discussion_chat.id}")

                                                    await asyncio.sleep(2)

                                                    sent_message = await telethon_client.send_message(
                                                        entity=discussion_chat,
                                                        message=comment,
                                                        reply_to=discussion_head.id
                                                    )

                                                    print(f"‚ö†Ô∏è Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç—Ä–µ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–Ω–µ –ø–æ–¥ –ø–æ—Å—Ç)! ID: {sent_message.id}")
                                                    return {
                                                        "status": "success",
                                                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç—Ä–µ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–ø—Ä—è–º—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)",
                                                        "message_id": sent_message.id
                                                    }
                                                else:
                                                    return {"status": "error", "message": "Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}
                                            else:
                                                return {"status": "error", "message": "Telethon: –î–ª—è –ø–æ—Å—Ç–∞ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"}

                                        except Exception as discussion_error:
                                            print(f"‚ùå Telethon: –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {discussion_error}")
                                            return {"status": "error", "message": "Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                if "MSG_ID_INVALID" in error_str:
                                    return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
                                elif "USER_BANNED_IN_CHANNEL" in error_str:
                                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                                else:
                                    return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {error_str}"}
                        else:
                            # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
                            print(f"üí¨ Telethon: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç/–≥—Ä—É–ø–ø—É...")

                            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                            sent_message = await telethon_client.send_message(
                                entity=entity,
                                message=comment,
                                reply_to=message_id
                            )

                            print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç! ID: {sent_message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                                "message_id": sent_message.id
                            }

                    except Exception as entity_error:
                        error_str = str(entity_error)
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: {error_str}")

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telethon
                        if "USERNAME_INVALID" in error_str:
                            return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–∞–Ω–∞–ª–∞"}
                        elif "CHAT_ADMIN_REQUIRED" in error_str:
                            return {"status": "error", "message": "Telethon: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}
                        elif "MESSAGE_ID_INVALID" in error_str:
                            return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                        elif "PEER_ID_INVALID" in error_str:
                            return {"status": "error", "message": "Telethon: –ß–∞—Ç/–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                        elif "USER_BANNED_IN_CHANNEL" in error_str:
                            return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                        else:
                            return {"status": "error", "message": f"Telethon: {error_str}"}

                finally:
                    print(f"üîå Telethon: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    await telethon_client.disconnect()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                            print(f"üóëÔ∏è Telethon: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        print(f"‚ö†Ô∏è Telethon: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {cleanup_error}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            import traceback
            print(f"üîç Telethon: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}

    async def _send_comment_pyrogram_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Pyrogram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –≤ —á–∞—Ç {chat_id}, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}")
            print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id
            target_chat = chat_id
            if isinstance(chat_id, str):
                if chat_id.startswith('@'):
                    target_chat = chat_id
                elif chat_id.isdigit():
                    target_chat = int(chat_id)
                elif chat_id.startswith('-') and chat_id[1:].isdigit():
                    target_chat = int(chat_id)

            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ reply_to_message_id (–∏–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            try:
                print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                await asyncio.sleep(1)

                sent_message = await client.send_message(
                    chat_id=target_chat,
                    text=comment,
                    reply_to_message_id=message_id,
                    disable_notification=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                )

                if sent_message and hasattr(sent_message, 'id'):
                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                    return {
                        "status": "success",
                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç",
                        "message_id": sent_message.id
                    }

            except Exception as reply_error:
                error_str = str(reply_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {error_str}")

                # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "CHAT_WRITE_FORBIDDEN" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}")

                    try:
                        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
                        channel = await client.get_chat(chat_id)
                        discussion_group_id = None

                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(target_chat)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                            except Exception as alt_search_error:
                                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {alt_search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ Telethon
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
                        }

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {channel_error}")
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {chat_id} —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                        }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "PEER_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–ö–∞–Ω–∞–ª/—á–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ"}
                elif "REPLY_MESSAGE_INVALID" in error_str:
                    return {"status": "error", "message": "–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Pyrogram –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {str(e)}"}

    async def _send_comment_telethon_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Telethon –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"""
        try:
            print(f"üì± Telethon: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                try:
                    from telethon import TelegramClient
                    from telethon.tl.functions.messages import SendMessageRequest
                    from telethon.tl.types import InputReplyToMessage
                    print(f"‚úÖ Telethon –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError:
                    print(f"‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è Telethon
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")
                telethon_session_file = os.path.join(SESSIONS_DIR, f"telethon_{phone_clean}")

                # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                session_file_path = f"{telethon_session_file}.session"
                if not os.path.exists(session_file_path):
                    try:
                        print(f"üîÑ Telethon: –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–µ—Å—Å–∏—é...")
                        await self._convert_pyrogram_to_telethon_session(pyrogram_session_file, telethon_session_file)
                    except Exception as convert_error:
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_error}")
                        return {"status": "error", "message": "Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"}

                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)
                    await telethon_client.start()

                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.phone})")

                except Exception as client_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
                    return {"status": "error", "message": "Telethon: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}

                try:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è Telethon
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                    else:
                        target_entity = chat_id

                    print(f"üìç Telethon: –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º {target_entity}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                    entity = await telethon_client.get_entity(target_entity)
                    print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å - {type(entity).__name__}")

                    # –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è InputReplyToMessage
                    try:
                        print(f"üéØ Telethon: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç {message_id}...")

                        # –°–æ–∑–¥–∞–µ–º reply –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º
                        reply_to = InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—é
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply
                        result = await telethon_client(SendMessageRequest(
                            peer=entity,
                            message=comment,
                            reply_to=reply_to,
                            random_id=telethon_client._get_random_id()
                        ))

                        if result and hasattr(result, 'updates') and result.updates:
                            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            for update in result.updates:
                                if hasattr(update, 'message') and hasattr(update.message, 'id'):
                                    print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç! ID: {update.message.id}")
                                    return {
                                        "status": "success",
                                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞",
                                        "message_id": update.message.id
                                    }

                        print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (–±–µ–∑ ID)")
                        return {
                            "status": "success",
                            "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"
                        }

                    except Exception as direct_error:
                        error_str = str(direct_error)
                        print(f"‚ùå Telethon: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}")

                        # –ú–µ—Ç–æ–¥ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        try:
                            print(f"üîÑ Telethon: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –º–µ—Ç–æ–¥...")

                            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                            sent_message = await telethon_client.send_message(
                                entity=entity,
                                message=comment,
                                reply_to=message_id
                            )

                            print(f"‚úÖ Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª! ID: {sent_message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥)",
                                "message_id": sent_message.id
                            }

                        except Exception as standard_error:
                            error_str = str(standard_error)
                            print(f"‚ùå Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {error_str}")

                            if "CHAT_ADMIN_REQUIRED" in error_str:
                                return {"status": "error", "message": "Telethon: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}
                            elif "MSG_ID_INVALID" in error_str:
                                return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                            elif "USER_BANNED_IN_CHANNEL" in error_str:
                                return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                            else:
                                return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {error_str}"}

                except Exception as send_error:
                    error_str = str(send_error)
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_str}")

                    if "USERNAME_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞"}
                    elif "PEER_ID_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    elif "USER_BANNED_IN_CHANNEL" in error_str:
                        return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
                    else:
                        return {"status": "error", "message": f"Telethon: {error_str}"}

                finally:
                    print(f"üîå Telethon: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    await telethon_client.disconnect()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                            print(f"üóëÔ∏è Telethon: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        print(f"‚ö†Ô∏è Telethon: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {cleanup_error}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üîç Telethon: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}

    async def send_comment(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"""
        try:
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment' –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∫–∞–Ω–∞–ª–∞...")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üì∫ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º: {chat_id}, –ø–æ—Å—Ç ID: {message_id}")

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞
                from pyrogram.raw import functions, types

                # –ü–æ–ª—É—á–∞–µ–º peer –∫–∞–Ω–∞–ª–∞
                peer = await client.resolve_peer(chat_id)

                print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ discussions API...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SendMessage –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = await client.invoke(
                    functions.messages.SendMessage(
                        peer=peer,
                        message=comment,
                        reply_to=types.InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=None,  # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º top_msg_id –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            reply_to_peer_id=peer  # –£–∫–∞–∑—ã–≤–∞–µ–º peer –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        ),
                        random_id=client.rnd_id(),
                        silent=False  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Ç–∏—Ö–∏–µ
                    )
                )

                if result and hasattr(result, 'updates') and result.updates:
                    for update in result.updates:
                        if hasattr(update, 'message') and hasattr(update.message, 'id'):
                            print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'! ID: {update.message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'",
                                "message_id": update.message.id
                            }

                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'")
                return {
                    "status": "success",
                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"
                }

            except Exception as api_error:
                error_str = str(api_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {error_str}")

                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "PEER_ID_INVALID" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                        channel = await client.get_chat(chat_id)

                        # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                        discussion_group_id = None
                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GetFullChannel
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(chat_id)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ): {discussion_group_id}")
                            except Exception as search_error:
                                print(f"‚ùå –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª—Å—è: {search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            try:
                                await asyncio.sleep(1)

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞)")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        else:
                            return {"status": "error", "message": "–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {channel_error}")
                        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(channel_error)}"}

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}"}

    async def _send_comment_telethon_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Telethon –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"""
        try:
            print(f"üì± Telethon: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                try:
                    from telethon import TelegramClient
                    from telethon.tl.functions.messages import SendMessageRequest
                    from telethon.tl.types import InputReplyToMessage
                    print(f"‚úÖ Telethon –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError:
                    print(f"‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è Telethon
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")
                telethon_session_file = os.path.join(SESSIONS_DIR, f"telethon_{phone_clean}")

                # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                session_file_path = f"{telethon_session_file}.session"
                if not os.path.exists(session_file_path):
                    try:
                        print(f"üîÑ Telethon: –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–µ—Å—Å–∏—é...")
                        await self._convert_pyrogram_to_telethon_session(pyrogram_session_file, telethon_session_file)
                    except Exception as convert_error:
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_error}")
                        return {"status": "error", "message": "Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"}

                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)
                    await telethon_client.start()

                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.phone})")

                except Exception as client_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
                    return {"status": "error", "message": "Telethon: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}

                try:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è Telethon
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                    else:
                        target_entity = chat_id

                    print(f"üìç Telethon: –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º {target_entity}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                    entity = await telethon_client.get_entity(target_entity)
                    print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å - {type(entity).__name__}")

                    # –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è InputReplyToMessage
                    try:
                        print(f"üéØ Telethon: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç {message_id}...")

                        # –°–æ–∑–¥–∞–µ–º reply –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º
                        reply_to = InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—é
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply
                        result = await telethon_client(SendMessageRequest(
                            peer=entity,
                            message=comment,
                            reply_to=reply_to,
                            random_id=telethon_client._get_random_id()
                        ))

                        if result and hasattr(result, 'updates') and result.updates:
                            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            for update in result.updates:
                                if hasattr(update, 'message') and hasattr(update.message, 'id'):
                                    print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç! ID: {update.message.id}")
                                    return {
                                        "status": "success",
                                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞",
                                        "message_id": update.message.id
                                    }

                        print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (–±–µ–∑ ID)")
                        return {
                            "status": "success",
                            "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"
                        }

                    except Exception as direct_error:
                        error_str = str(direct_error)
                        print(f"‚ùå Telethon: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}")

                        # –ú–µ—Ç–æ–¥ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        try:
                            print(f"üîÑ Telethon: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –º–µ—Ç–æ–¥...")

                            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                            sent_message = await telethon_client.send_message(
                                entity=entity,
                                message=comment,
                                reply_to=message_id
                            )

                            print(f"‚úÖ Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª! ID: {sent_message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥)",
                                "message_id": sent_message.id
                            }

                        except Exception as standard_error:
                            error_str = str(standard_error)
                            print(f"‚ùå Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {error_str}")

                            if "CHAT_ADMIN_REQUIRED" in error_str:
                                return {"status": "error", "message": "Telethon: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}
                            elif "MSG_ID_INVALID" in error_str:
                                return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                            elif "USER_BANNED_IN_CHANNEL" in error_str:
                                return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                            else:
                                return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {error_str}"}

                except Exception as send_error:
                    error_str = str(send_error)
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_str}")

                    if "USERNAME_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞"}
                    elif "PEER_ID_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    elif "USER_BANNED_IN_CHANNEL" in error_str:
                        return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
                    else:
                        return {"status": "error", "message": f"Telethon: {error_str}"}

                finally:
                    print(f"üîå Telethon: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    await telethon_client.disconnect()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                            print(f"üóëÔ∏è Telethon: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        print(f"‚ö†Ô∏è Telethon: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {cleanup_error}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üîç Telethon: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}

    async def _send_comment_pyrogram_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Pyrogram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –≤ —á–∞—Ç {chat_id}, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}")
            print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id
            target_chat = chat_id
            if isinstance(chat_id, str):
                if chat_id.startswith('@'):
                    target_chat = chat_id
                elif chat_id.isdigit():
                    target_chat = int(chat_id)
                elif chat_id.startswith('-') and chat_id[1:].isdigit():
                    target_chat = int(chat_id)

            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ reply_to_message_id (–∏–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            try:
                print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                await asyncio.sleep(1)

                sent_message = await client.send_message(
                    chat_id=target_chat,
                    text=comment,
                    reply_to_message_id=message_id,
                    disable_notification=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                )

                if sent_message and hasattr(sent_message, 'id'):
                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                    return {
                        "status": "success",
                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç",
                        "message_id": sent_message.id
                    }

            except Exception as reply_error:
                error_str = str(reply_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {error_str}")

                # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "CHAT_WRITE_FORBIDDEN" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}")

                    try:
                        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
                        channel = await client.get_chat(chat_id)
                        discussion_group_id = None

                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(target_chat)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                            except Exception as alt_search_error:
                                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {alt_search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ Telethon
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
                        }

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {channel_error}")
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {chat_id} —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                        }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "PEER_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–ö–∞–Ω–∞–ª/—á–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ"}
                elif "REPLY_MESSAGE_INVALID" in error_str:
                    return {"status": "error", "message": "–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Pyrogram –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {str(e)}"}

    async def _convert_pyrogram_to_telethon_session(self, pyrogram_path: str, telethon_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ Pyrogram –≤ —Ñ–æ—Ä–º–∞—Ç Telethon —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
        try:
            import sqlite3
            import shutil

            print(f"üîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—É—é Telethon —Å–µ—Å—Å–∏—é")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telethon —Å –Ω—É–ª—è
            telethon_session_file = f"{telethon_path}.session"

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(telethon_session_file):
                os.remove(telethon_session_file)

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Pyrogram —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è auth_key
            pyrogram_conn = sqlite3.connect(pyrogram_path)
            pyrogram_cursor = pyrogram_conn.cursor()

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã sessions –≤ Pyrogram
                pyrogram_cursor.execute("PRAGMA table_info(sessions)")
                columns_info = pyrogram_cursor.fetchall()
                column_names = [col[1] for col in columns_info]
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã Pyrogram sessions: {column_names}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Pyrogram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                if 'server_address' in column_names:
                    query = "SELECT dc_id, server_address, port, auth_key, user_id FROM sessions LIMIT 1"
                    pyrogram_cursor.execute(query)
                    session_data = pyrogram_cursor.fetchone()
                    if session_data:
                        dc_id, server_address, port, auth_key, user_id = session_data
                    else:
                        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Pyrogram —Ñ–∞–π–ª–µ")
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
                    query = "SELECT dc_id, auth_key FROM sessions LIMIT 1"
                    pyrogram_cursor.execute(query)
                    session_data = pyrogram_cursor.fetchone()
                    if session_data:
                        dc_id, auth_key = session_data
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
                        server_address = "149.154.167.51" if dc_id == 2 else "149.154.175.53"
                        port = 443
                        user_id = 0
                    else:
                        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Pyrogram —Ñ–∞–π–ª–µ")

                print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: DC{dc_id}, Server: {server_address}:{port}")

            finally:
                pyrogram_conn.close()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telethon
            conn = sqlite3.connect(telethon_session_file)
            cursor = conn.cursor()

            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Telethon —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                print("üî® –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telethon...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                existing_tables = [row[0] for row in cursor.fetchall()]
                print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
                print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

                # –¢–∞–±–ª–∏—Ü–∞ version (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è Telethon)
                cursor.execute("CREATE TABLE IF NOT EXISTS version (version INTEGER)")
                cursor.execute("INSERT INTO version VALUES (1)")
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ version")

                # –¢–∞–±–ª–∏—Ü–∞ sessions (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS sessions (
                        dc_id INTEGER PRIMARY KEY,
                        server_address TEXT,
                        port INTEGER,
                        auth_key BLOB,
                        takeout_id INTEGER
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ sessions")

                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                cursor.execute("""
                    INSERT OR REPLACE INTO sessions (dc_id, server_address, port, auth_key, takeout_id)
                    VALUES (?, ?, ?, ?, NULL)
                """, (dc_id, server_address, port, auth_key))
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É sessions")

                # –¢–∞–±–ª–∏—Ü–∞ entities (–¥–ª—è –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—á–∞—Ç–æ–≤)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS entities (
                        id INTEGER PRIMARY KEY,
                        hash INTEGER NOT NULL,
                        username TEXT,
                        phone INTEGER,
                        name TEXT,
                        date INTEGER
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ entities")

                # –¢–∞–±–ª–∏—Ü–∞ sent_files (–¥–ª—è –∫–µ—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS sent_files (
                        md5_digest BLOB,
                        file_size INTEGER,
                        type INTEGER,
                        id INTEGER,
                        hash INTEGER,
                        PRIMARY KEY(md5_digest, file_size, type)
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ sent_files")

                # –ù–ï —Å–æ–∑–¥–∞–µ–º update_state - Telethon —Å–æ–∑–¥–∞–µ—Ç –µ—ë —Å–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ update_state –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è - Telethon —É–ø—Ä–∞–≤–ª—è–µ—Ç –µ—é —Å–∞–º")

                conn.commit()
                print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è Telethon —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é")

            finally:
                conn.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telethon —Å–µ—Å—Å–∏–∏: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(f"{telethon_path}.session"):
                    os.remove(f"{telethon_path}.session")
            except:
                pass
            raise e

    async def auto_delete_after_campaign(self, campaign_id: int, delay_seconds: int = 5) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")

            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(delay_seconds)

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ –∫–∞–º–ø–∞–Ω–∏–∏
            db = next(get_db())
            try:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                send_logs = db.query(SendLog).filter(SendLog.campaign_id == campaign_id).all()
                account_ids = list(set(log.account_id for log in send_logs))

                if not account_ids:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
                    return {"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"}

                print(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

                deleted_accounts = []
                failed_deletions = []

                for account_id in account_ids:
                    print(f"üîÑ –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {account_id}...")

                    result = await self.delete_telegram_account(
                        account_id,
                        reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
                    )

                    if result["status"] == "success":
                        deleted_accounts.append(result.get("deleted_account", f"Account {account_id}"))
                        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} —É–¥–∞–ª–µ–Ω")
                    else:
                        failed_deletions.append(f"Account {account_id}: {result['message']}")
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account_id}: {result['message']}")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(2)

                return {
                    "status": "success",
                    "message": f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ: {len(deleted_accounts)}, –æ—à–∏–±–æ–∫: {len(failed_deletions)}",
                    "deleted_accounts": deleted_accounts,
                    "failed_deletions": failed_deletions
                }

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"}

    async def get_client(self, account_id: int) -> Optional[Client]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è–º)"""
        return await self._get_client_for_account(account_id)

    async def update_profile(self, account_id: int, first_name: str = None, last_name: str = None, bio: str = None, profile_photo_path: str = None) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram"""
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: –∏–º—è={first_name}, —Ñ–∞–º–∏–ª–∏—è={last_name}, –±–∏–æ={bio}")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                me = await client.get_me()
                print(f"üë§ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {me.first_name} {me.last_name or ''}")
            except Exception as me_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {me_error}")
                me = None

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            update_success = False
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                first_name_clean = (first_name or "").strip()[:64] if first_name else ""
                last_name_clean = (last_name or "").strip()[:64] if last_name else ""
                bio_clean = (bio or "").strip()[:70] if bio else ""  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –±–∏–æ –¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤

                if not first_name_clean:
                    first_name_clean = "User"  # Telegram —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è

                print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
                print(f"   –ò–º—è: '{first_name_clean}'")
                print(f"   –§–∞–º–∏–ª–∏—è: '{last_name_clean}'")
                print(f"   –ë–∏–æ: '{bio_clean}'")

                await client.update_profile(
                    first_name=first_name_clean,
                    last_name=last_name_clean,
                    bio=bio_clean
                )

                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram")
                update_success = True

            except Exception as profile_error:
                error_str = str(profile_error).lower()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_error}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Telegram
                if "firstname_invalid" in error_str:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã"}
                elif "about_too_long" in error_str:
                    return {"status": "error", "message": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 70 —Å–∏–º–≤–æ–ª–æ–≤)"}
                elif "flood" in error_str:
                    return {"status": "error", "message": "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(profile_error)}"}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            photo_success = True
            if profile_photo_path and os.path.exists(profile_photo_path):
                try:
                    print(f"üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {profile_photo_path}")
                    await client.set_profile_photo(photo=profile_photo_path)
                    print(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as photo_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {photo_error}")
                    photo_success = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                updated_me = await client.get_me()
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_me.first_name} {updated_me.last_name or ''}")

                if update_success:
                    if profile_photo_path and not photo_success:
                        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ"}
                    else:
                        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram"}
                else:
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}

            except Exception as check_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {check_error}")
                if update_success:
                    return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)"}
                else:
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

    async def send_reaction(self, account_id: int, chat_id: str, message_id: int, emoji: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            from pyrogram.raw import functions
            from pyrogram.raw.types import ReactionEmoji

            await client.invoke(
                functions.messages.SendReaction(
                    peer=await client.resolve_peer(chat_id),
                    msg_id=message_id,
                    reaction=[ReactionEmoji(emoticon=emoji)]
                )
            )

            return {"status": "success", "message": "–†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}"}

    async def view_message(self, account_id: int, chat_id: str, message_id: int) -> Dict:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await client.read_chat_history(chat_id=chat_id, max_id=message_id)

            return {"status": "success", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"}

    async def send_comment(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"""
        try:
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment' –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∫–∞–Ω–∞–ª–∞...")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üì∫ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º: {chat_id}, –ø–æ—Å—Ç ID: {message_id}")

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞
                from pyrogram.raw import functions, types

                # –ü–æ–ª—É—á–∞–µ–º peer –∫–∞–Ω–∞–ª–∞
                peer = await client.resolve_peer(chat_id)

                print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ discussions API...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SendMessage –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = await client.invoke(
                    functions.messages.SendMessage(
                        peer=peer,
                        message=comment,
                        reply_to=types.InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=None,  # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º top_msg_id –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            reply_to_peer_id=peer  # –£–∫–∞–∑—ã–≤–∞–µ–º peer –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        ),
                        random_id=client.rnd_id(),
                        silent=False  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Ç–∏—Ö–∏–µ
                    )
                )

                if result and hasattr(result, 'updates') and result.updates:
                    for update in result.updates:
                        if hasattr(update, 'message') and hasattr(update.message, 'id'):
                            print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'! ID: {update.message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'",
                                "message_id": update.message.id
                            }

                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'")
                return {
                    "status": "success",
                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"
                }

            except Exception as api_error:
                error_str = str(api_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {error_str}")

                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "PEER_ID_INVALID" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                        channel = await client.get_chat(chat_id)

                        # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                        discussion_group_id = None
                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GetFullChannel
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(chat_id)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ): {discussion_group_id}")
                            except Exception as search_error:
                                print(f"‚ùå –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª—Å—è: {search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            try:
                                await asyncio.sleep(1)

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞)")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        else:
                            return {"status": "error", "message": "–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {channel_error}")
                        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(channel_error)}"}

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}"}

    async def _send_comment_telethon_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Telethon –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"""
        try:
            print(f"üì± Telethon: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                try:
                    from telethon import TelegramClient
                    from telethon.tl.functions.messages import SendMessageRequest
                    from telethon.tl.types import InputReplyToMessage
                    print(f"‚úÖ Telethon –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError:
                    print(f"‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è Telethon
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")
                telethon_session_file = os.path.join(SESSIONS_DIR, f"telethon_{phone_clean}")

                # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                session_file_path = f"{telethon_session_file}.session"
                if not os.path.exists(session_file_path):
                    try:
                        print(f"üîÑ Telethon: –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–µ—Å—Å–∏—é...")
                        await self._convert_pyrogram_to_telethon_session(pyrogram_session_file, telethon_session_file)
                    except Exception as convert_error:
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_error}")
                        return {"status": "error", "message": "Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"}

                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)
                    await telethon_client.start()

                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.phone})")

                except Exception as client_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
                    return {"status": "error", "message": "Telethon: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}

                try:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è Telethon
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                    else:
                        target_entity = chat_id

                    print(f"üìç Telethon: –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º {target_entity}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                    entity = await telethon_client.get_entity(target_entity)
                    print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å - {type(entity).__name__}")

                    # –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è InputReplyToMessage
                    try:
                        print(f"üéØ Telethon: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç {message_id}...")

                        # –°–æ–∑–¥–∞–µ–º reply –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º
                        reply_to = InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—é
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply
                        result = await telethon_client(SendMessageRequest(
                            peer=entity,
                            message=comment,
                            reply_to=reply_to,
                            random_id=telethon_client._get_random_id()
                        ))

                        if result and hasattr(result, 'updates') and result.updates:
                            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            for update in result.updates:
                                if hasattr(update, 'message') and hasattr(update.message, 'id'):
                                    print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç! ID: {update.message.id}")
                                    return {
                                        "status": "success",
                                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞",
                                        "message_id": update.message.id
                                    }

                        print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (–±–µ–∑ ID)")
                        return {
                            "status": "success",
                            "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"
                        }

                    except Exception as direct_error:
                        error_str = str(direct_error)
                        print(f"‚ùå Telethon: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}")

                        # –ú–µ—Ç–æ–¥ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        try:
                            print(f"üîÑ Telethon: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –º–µ—Ç–æ–¥...")

                            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                            sent_message = await telethon_client.send_message(
                                entity=entity,
                                message=comment,
                                reply_to=message_id
                            )

                            print(f"‚úÖ Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª! ID: {sent_message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥)",
                                "message_id": sent_message.id
                            }

                        except Exception as standard_error:
                            error_str = str(standard_error)
                            print(f"‚ùå Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {error_str}")

                            if "CHAT_ADMIN_REQUIRED" in error_str:
                                return {"status": "error", "message": "Telethon: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}
                            elif "MSG_ID_INVALID" in error_str:
                                return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                            elif "USER_BANNED_IN_CHANNEL" in error_str:
                                return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                            else:
                                return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {error_str}"}

                except Exception as send_error:
                    error_str = str(send_error)
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_str}")

                    if "USERNAME_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞"}
                    elif "PEER_ID_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    elif "USER_BANNED_IN_CHANNEL" in error_str:
                        return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
                    else:
                        return {"status": "error", "message": f"Telethon: {error_str}"}

                finally:
                    print(f"üîå Telethon: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    await telethon_client.disconnect()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                            print(f"üóëÔ∏è Telethon: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        print(f"‚ö†Ô∏è Telethon: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {cleanup_error}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üîç Telethon: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}

    async def _send_comment_pyrogram_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Pyrogram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –≤ —á–∞—Ç {chat_id}, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}")
            print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id
            target_chat = chat_id
            if isinstance(chat_id, str):
                if chat_id.startswith('@'):
                    target_chat = chat_id
                elif chat_id.isdigit():
                    target_chat = int(chat_id)
                elif chat_id.startswith('-') and chat_id[1:].isdigit():
                    target_chat = int(chat_id)

            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ reply_to_message_id (–∏–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            try:
                print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                await asyncio.sleep(1)

                sent_message = await client.send_message(
                    chat_id=target_chat,
                    text=comment,
                    reply_to_message_id=message_id,
                    disable_notification=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                )

                if sent_message and hasattr(sent_message, 'id'):
                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                    return {
                        "status": "success",
                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç",
                        "message_id": sent_message.id
                    }

            except Exception as reply_error:
                error_str = str(reply_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {error_str}")

                # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "CHAT_WRITE_FORBIDDEN" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}")

                    try:
                        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
                        channel = await client.get_chat(chat_id)
                        discussion_group_id = None

                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(target_chat)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                            except Exception as alt_search_error:
                                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {alt_search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ Telethon
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
                        }

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {channel_error}")
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {chat_id} —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                        }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "PEER_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–ö–∞–Ω–∞–ª/—á–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ"}
                elif "REPLY_MESSAGE_INVALID" in error_str:
                    return {"status": "error", "message": "–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Pyrogram –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {str(e)}"}

    async def _convert_pyrogram_to_telethon_session(self, pyrogram_path: str, telethon_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ Pyrogram –≤ —Ñ–æ—Ä–º–∞—Ç Telethon —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
        try:
            import sqlite3
            import shutil

            print(f"üîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—É—é Telethon —Å–µ—Å—Å–∏—é")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telethon —Å –Ω—É–ª—è
            telethon_session_file = f"{telethon_path}.session"

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(telethon_session_file):
                os.remove(telethon_session_file)

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Pyrogram —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è auth_key
            pyrogram_conn = sqlite3.connect(pyrogram_path)
            pyrogram_cursor = pyrogram_conn.cursor()

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã sessions –≤ Pyrogram
                pyrogram_cursor.execute("PRAGMA table_info(sessions)")
                columns_info = pyrogram_cursor.fetchall()
                column_names = [col[1] for col in columns_info]
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã Pyrogram sessions: {column_names}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Pyrogram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                if 'server_address' in column_names:
                    query = "SELECT dc_id, server_address, port, auth_key, user_id FROM sessions LIMIT 1"
                    pyrogram_cursor.execute(query)
                    session_data = pyrogram_cursor.fetchone()
                    if session_data:
                        dc_id, server_address, port, auth_key, user_id = session_data
                    else:
                        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Pyrogram —Ñ–∞–π–ª–µ")
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
                    query = "SELECT dc_id, auth_key FROM sessions LIMIT 1"
                    pyrogram_cursor.execute(query)
                    session_data = pyrogram_cursor.fetchone()
                    if session_data:
                        dc_id, auth_key = session_data
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
                        server_address = "149.154.167.51" if dc_id == 2 else "149.154.175.53"
                        port = 443
                        user_id = 0
                    else:
                        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Pyrogram —Ñ–∞–π–ª–µ")

                print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: DC{dc_id}, Server: {server_address}:{port}")

            finally:
                pyrogram_conn.close()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telethon
            conn = sqlite3.connect(telethon_session_file)
            cursor = conn.cursor()

            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Telethon —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                print("üî® –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telethon...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                existing_tables = [row[0] for row in cursor.fetchall()]
                print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
                print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

                # –¢–∞–±–ª–∏—Ü–∞ version (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è Telethon)
                cursor.execute("CREATE TABLE IF NOT EXISTS version (version INTEGER)")
                cursor.execute("INSERT INTO version VALUES (1)")
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ version")

                # –¢–∞–±–ª–∏—Ü–∞ sessions (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS sessions (
                        dc_id INTEGER PRIMARY KEY,
                        server_address TEXT,
                        port INTEGER,
                        auth_key BLOB,
                        takeout_id INTEGER
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ sessions")

                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                cursor.execute("""
                    INSERT OR REPLACE INTO sessions (dc_id, server_address, port, auth_key, takeout_id)
                    VALUES (?, ?, ?, ?, NULL)
                """, (dc_id, server_address, port, auth_key))
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É sessions")

                # –¢–∞–±–ª–∏—Ü–∞ entities (–¥–ª—è –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—á–∞—Ç–æ–≤)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS entities (
                        id INTEGER PRIMARY KEY,
                        hash INTEGER NOT NULL,
                        username TEXT,
                        phone INTEGER,
                        name TEXT,
                        date INTEGER
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ entities")

                # –¢–∞–±–ª–∏—Ü–∞ sent_files (–¥–ª—è –∫–µ—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS sent_files (
                        md5_digest BLOB,
                        file_size INTEGER,
                        type INTEGER,
                        id INTEGER,
                        hash INTEGER,
                        PRIMARY KEY(md5_digest, file_size, type)
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ sent_files")

                # –ù–ï —Å–æ–∑–¥–∞–µ–º update_state - Telethon —Å–æ–∑–¥–∞–µ—Ç –µ—ë —Å–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ update_state –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è - Telethon —É–ø—Ä–∞–≤–ª—è–µ—Ç –µ—é —Å–∞–º")

                conn.commit()
                print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è Telethon —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é")

            finally:
                conn.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telethon —Å–µ—Å—Å–∏–∏: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(f"{telethon_path}.session"):
                    os.remove(f"{telethon_path}.session")
            except:
                pass
            raise e

    async def auto_delete_after_campaign(self, campaign_id: int, delay_seconds: int = 5) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")

            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(delay_seconds)

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ –∫–∞–º–ø–∞–Ω–∏–∏
            db = next(get_db())
            try:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                send_logs = db.query(SendLog).filter(SendLog.campaign_id == campaign_id).all()
                account_ids = list(set(log.account_id for log in send_logs))

                if not account_ids:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
                    return {"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"}

                print(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

                deleted_accounts = []
                failed_deletions = []

                for account_id in account_ids:
                    print(f"üîÑ –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {account_id}...")

                    result = await self.delete_telegram_account(
                        account_id,
                        reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
                    )

                    if result["status"] == "success":
                        deleted_accounts.append(result.get("deleted_account", f"Account {account_id}"))
                        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} —É–¥–∞–ª–µ–Ω")
                    else:
                        failed_deletions.append(f"Account {account_id}: {result['message']}")
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account_id}: {result['message']}")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(2)

                return {
                    "status": "success",
                    "message": f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ: {len(deleted_accounts)}, –æ—à–∏–±–æ–∫: {len(failed_deletions)}",
                    "deleted_accounts": deleted_accounts,
                    "failed_deletions": failed_deletions
                }

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"}

    async def get_client(self, account_id: int) -> Optional[Client]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è–º)"""
        return await self._get_client_for_account(account_id)

    async def update_profile(self, account_id: int, first_name: str = None, last_name: str = None, bio: str = None, profile_photo_path: str = None) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram"""
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: –∏–º—è={first_name}, —Ñ–∞–º–∏–ª–∏—è={last_name}, –±–∏–æ={bio}")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                me = await client.get_me()
                print(f"üë§ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {me.first_name} {me.last_name or ''}")
            except Exception as me_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {me_error}")
                me = None

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            update_success = False
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                first_name_clean = (first_name or "").strip()[:64] if first_name else ""
                last_name_clean = (last_name or "").strip()[:64] if last_name else ""
                bio_clean = (bio or "").strip()[:70] if bio else ""  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –±–∏–æ –¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤

                if not first_name_clean:
                    first_name_clean = "User"  # Telegram —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è

                print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
                print(f"   –ò–º—è: '{first_name_clean}'")
                print(f"   –§–∞–º–∏–ª–∏—è: '{last_name_clean}'")
                print(f"   –ë–∏–æ: '{bio_clean}'")

                await client.update_profile(
                    first_name=first_name_clean,
                    last_name=last_name_clean,
                    bio=bio_clean
                )

                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram")
                update_success = True

            except Exception as profile_error:
                error_str = str(profile_error).lower()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_error}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Telegram
                if "firstname_invalid" in error_str:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã"}
                elif "about_too_long" in error_str:
                    return {"status": "error", "message": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 70 —Å–∏–º–≤–æ–ª–æ–≤)"}
                elif "flood" in error_str:
                    return {"status": "error", "message": "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(profile_error)}"}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            photo_success = True
            if profile_photo_path and os.path.exists(profile_photo_path):
                try:
                    print(f"üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {profile_photo_path}")
                    await client.set_profile_photo(photo=profile_photo_path)
                    print(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as photo_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {photo_error}")
                    photo_success = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                updated_me = await client.get_me()
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_me.first_name} {updated_me.last_name or ''}")

                if update_success:
                    if profile_photo_path and not photo_success:
                        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ"}
                    else:
                        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram"}
                else:
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}

            except Exception as check_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {check_error}")
                if update_success:
                    return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)"}
                else:
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

    async def send_reaction(self, account_id: int, chat_id: str, message_id: int, emoji: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            from pyrogram.raw import functions
            from pyrogram.raw.types import ReactionEmoji

            await client.invoke(
                functions.messages.SendReaction(
                    peer=await client.resolve_peer(chat_id),
                    msg_id=message_id,
                    reaction=[ReactionEmoji(emoticon=emoji)]
                )
            )

            return {"status": "success", "message": "–†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}"}

    async def view_message(self, account_id: int, chat_id: str, message_id: int) -> Dict:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await client.read_chat_history(chat_id=chat_id, max_id=message_id)

            return {"status": "success", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"}

    async def send_comment(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"""
        try:
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment' –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∫–∞–Ω–∞–ª–∞...")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üì∫ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º: {chat_id}, –ø–æ—Å—Ç ID: {message_id}")

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞
                from pyrogram.raw import functions, types

                # –ü–æ–ª—É—á–∞–µ–º peer –∫–∞–Ω–∞–ª–∞
                peer = await client.resolve_peer(chat_id)

                print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ discussions API...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SendMessage –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = await client.invoke(
                    functions.messages.SendMessage(
                        peer=peer,
                        message=comment,
                        reply_to=types.InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=None,  # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º top_msg_id –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            reply_to_peer_id=peer  # –£–∫–∞–∑—ã–≤–∞–µ–º peer –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        ),
                        random_id=client.rnd_id(),
                        silent=False  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Ç–∏—Ö–∏–µ
                    )
                )

                if result and hasattr(result, 'updates') and result.updates:
                    for update in result.updates:
                        if hasattr(update, 'message') and hasattr(update.message, 'id'):
                            print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'! ID: {update.message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'",
                                "message_id": update.message.id
                            }

                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'")
                return {
                    "status": "success",
                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"
                }

            except Exception as api_error:
                error_str = str(api_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {error_str}")

                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "PEER_ID_INVALID" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                        channel = await client.get_chat(chat_id)

                        # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                        discussion_group_id = None
                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GetFullChannel
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(chat_id)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ): {discussion_group_id}")
                            except Exception as search_error:
                                print(f"‚ùå –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª—Å—è: {search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            try:
                                await asyncio.sleep(1)

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞)")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        else:
                            return {"status": "error", "message": "–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {channel_error}")
                        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(channel_error)}"}

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}"}

    async def _send_comment_telethon_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Telethon –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"""
        try:
            print(f"üì± Telethon: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                try:
                    from telethon import TelegramClient
                    from telethon.tl.functions.messages import SendMessageRequest
                    from telethon.tl.types import InputReplyToMessage
                    print(f"‚úÖ Telethon –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError:
                    print(f"‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è Telethon
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")
                telethon_session_file = os.path.join(SESSIONS_DIR, f"telethon_{phone_clean}")

                # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                session_file_path = f"{telethon_session_file}.session"
                if not os.path.exists(session_file_path):
                    try:
                        print(f"üîÑ Telethon: –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–µ—Å—Å–∏—é...")
                        await self._convert_pyrogram_to_telethon_session(pyrogram_session_file, telethon_session_file)
                    except Exception as convert_error:
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_error}")
                        return {"status": "error", "message": "Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"}

                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)
                    await telethon_client.start()

                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.phone})")

                except Exception as client_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
                    return {"status": "error", "message": "Telethon: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}

                try:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è Telethon
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                    else:
                        target_entity = chat_id

                    print(f"üìç Telethon: –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º {target_entity}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                    entity = await telethon_client.get_entity(target_entity)
                    print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å - {type(entity).__name__}")

                    # –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è InputReplyToMessage
                    try:
                        print(f"üéØ Telethon: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç {message_id}...")

                        # –°–æ–∑–¥–∞–µ–º reply –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º
                        reply_to = InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—é
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply
                        result = await telethon_client(SendMessageRequest(
                            peer=entity,
                            message=comment,
                            reply_to=reply_to,
                            random_id=telethon_client._get_random_id()
                        ))

                        if result and hasattr(result, 'updates') and result.updates:
                            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            for update in result.updates:
                                if hasattr(update, 'message') and hasattr(update.message, 'id'):
                                    print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç! ID: {update.message.id}")
                                    return {
                                        "status": "success",
                                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞",
                                        "message_id": update.message.id
                                    }

                        print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (–±–µ–∑ ID)")
                        return {
                            "status": "success",
                            "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"
                        }

                    except Exception as direct_error:
                        error_str = str(direct_error)
                        print(f"‚ùå Telethon: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}")

                        # –ú–µ—Ç–æ–¥ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        try:
                            print(f"üîÑ Telethon: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –º–µ—Ç–æ–¥...")

                            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                            sent_message = await telethon_client.send_message(
                                entity=entity,
                                message=comment,
                                reply_to=message_id
                            )

                            print(f"‚úÖ Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª! ID: {sent_message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥)",
                                "message_id": sent_message.id
                            }

                        except Exception as standard_error:
                            error_str = str(standard_error)
                            print(f"‚ùå Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {error_str}")

                            if "CHAT_ADMIN_REQUIRED" in error_str:
                                return {"status": "error", "message": "Telethon: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}
                            elif "MSG_ID_INVALID" in error_str:
                                return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                            elif "USER_BANNED_IN_CHANNEL" in error_str:
                                return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                            else:
                                return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {error_str}"}

                except Exception as send_error:
                    error_str = str(send_error)
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_str}")

                    if "USERNAME_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞"}
                    elif "PEER_ID_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    elif "USER_BANNED_IN_CHANNEL" in error_str:
                        return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
                    else:
                        return {"status": "error", "message": f"Telethon: {error_str}"}

                finally:
                    print(f"üîå Telethon: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    await telethon_client.disconnect()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                            print(f"üóëÔ∏è Telethon: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        print(f"‚ö†Ô∏è Telethon: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {cleanup_error}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üîç Telethon: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}

    async def _send_comment_pyrogram_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Pyrogram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –≤ —á–∞—Ç {chat_id}, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}")
            print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id
            target_chat = chat_id
            if isinstance(chat_id, str):
                if chat_id.startswith('@'):
                    target_chat = chat_id
                elif chat_id.isdigit():
                    target_chat = int(chat_id)
                elif chat_id.startswith('-') and chat_id[1:].isdigit():
                    target_chat = int(chat_id)

            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ reply_to_message_id (–∏–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            try:
                print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                await asyncio.sleep(1)

                sent_message = await client.send_message(
                    chat_id=target_chat,
                    text=comment,
                    reply_to_message_id=message_id,
                    disable_notification=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                )

                if sent_message and hasattr(sent_message, 'id'):
                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                    return {
                        "status": "success",
                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç",
                        "message_id": sent_message.id
                    }

            except Exception as reply_error:
                error_str = str(reply_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {error_str}")

                # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "CHAT_WRITE_FORBIDDEN" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}")

                    try:
                        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
                        channel = await client.get_chat(chat_id)
                        discussion_group_id = None

                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(target_chat)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                            except Exception as alt_search_error:
                                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {alt_search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                            try:
                                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ Telethon
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
                        }

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {channel_error}")
                        return {
                            "status": "error",
                            "message": f"Pyrogram: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {chat_id} —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                        }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "PEER_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–ö–∞–Ω–∞–ª/—á–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ"}
                elif "REPLY_MESSAGE_INVALID" in error_str:
                    return {"status": "error", "message": "–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Pyrogram –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"Pyrogram –æ—à–∏–±–∫–∞: {str(e)}"}

    async def _convert_pyrogram_to_telethon_session(self, pyrogram_path: str, telethon_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ Pyrogram –≤ —Ñ–æ—Ä–º–∞—Ç Telethon —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
        try:
            import sqlite3
            import shutil

            print(f"üîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—É—é Telethon —Å–µ—Å—Å–∏—é")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telethon —Å –Ω—É–ª—è
            telethon_session_file = f"{telethon_path}.session"

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(telethon_session_file):
                os.remove(telethon_session_file)

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Pyrogram —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è auth_key
            pyrogram_conn = sqlite3.connect(pyrogram_path)
            pyrogram_cursor = pyrogram_conn.cursor()

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã sessions –≤ Pyrogram
                pyrogram_cursor.execute("PRAGMA table_info(sessions)")
                columns_info = pyrogram_cursor.fetchall()
                column_names = [col[1] for col in columns_info]
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã Pyrogram sessions: {column_names}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Pyrogram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                if 'server_address' in column_names:
                    query = "SELECT dc_id, server_address, port, auth_key, user_id FROM sessions LIMIT 1"
                    pyrogram_cursor.execute(query)
                    session_data = pyrogram_cursor.fetchone()
                    if session_data:
                        dc_id, server_address, port, auth_key, user_id = session_data
                    else:
                        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Pyrogram —Ñ–∞–π–ª–µ")
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
                    query = "SELECT dc_id, auth_key FROM sessions LIMIT 1"
                    pyrogram_cursor.execute(query)
                    session_data = pyrogram_cursor.fetchone()
                    if session_data:
                        dc_id, auth_key = session_data
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
                        server_address = "149.154.167.51" if dc_id == 2 else "149.154.175.53"
                        port = 443
                        user_id = 0
                    else:
                        raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Pyrogram —Ñ–∞–π–ª–µ")

                print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: DC{dc_id}, Server: {server_address}:{port}")

            finally:
                pyrogram_conn.close()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telethon
            conn = sqlite3.connect(telethon_session_file)
            cursor = conn.cursor()

            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Telethon —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                print("üî® –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telethon...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                existing_tables = [row[0] for row in cursor.fetchall()]
                print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
                print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

                # –¢–∞–±–ª–∏—Ü–∞ version (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è Telethon)
                cursor.execute("CREATE TABLE IF NOT EXISTS version (version INTEGER)")
                cursor.execute("INSERT INTO version VALUES (1)")
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ version")

                # –¢–∞–±–ª–∏—Ü–∞ sessions (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS sessions (
                        dc_id INTEGER PRIMARY KEY,
                        server_address TEXT,
                        port INTEGER,
                        auth_key BLOB,
                        takeout_id INTEGER
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ sessions")

                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                cursor.execute("""
                    INSERT OR REPLACE INTO sessions (dc_id, server_address, port, auth_key, takeout_id)
                    VALUES (?, ?, ?, ?, NULL)
                """, (dc_id, server_address, port, auth_key))
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É sessions")

                # –¢–∞–±–ª–∏—Ü–∞ entities (–¥–ª—è –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—á–∞—Ç–æ–≤)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS entities (
                        id INTEGER PRIMARY KEY,
                        hash INTEGER NOT NULL,
                        username TEXT,
                        phone INTEGER,
                        name TEXT,
                        date INTEGER
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ entities")

                # –¢–∞–±–ª–∏—Ü–∞ sent_files (–¥–ª—è –∫–µ—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS sent_files (
                        md5_digest BLOB,
                        file_size INTEGER,
                        type INTEGER,
                        id INTEGER,
                        hash INTEGER,
                        PRIMARY KEY(md5_digest, file_size, type)
                    )
                """)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ sent_files")

                # –ù–ï —Å–æ–∑–¥–∞–µ–º update_state - Telethon —Å–æ–∑–¥–∞–µ—Ç –µ—ë —Å–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ update_state –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è - Telethon —É–ø—Ä–∞–≤–ª—è–µ—Ç –µ—é —Å–∞–º")

                conn.commit()
                print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è Telethon —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é")

            finally:
                conn.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telethon —Å–µ—Å—Å–∏–∏: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(f"{telethon_path}.session"):
                    os.remove(f"{telethon_path}.session")
            except:
                pass
            raise e

    async def auto_delete_after_campaign(self, campaign_id: int, delay_seconds: int = 5) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")

            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(delay_seconds)

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ –∫–∞–º–ø–∞–Ω–∏–∏
            db = next(get_db())
            try:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                send_logs = db.query(SendLog).filter(SendLog.campaign_id == campaign_id).all()
                account_ids = list(set(log.account_id for log in send_logs))

                if not account_ids:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}")
                    return {"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"}

                print(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

                deleted_accounts = []
                failed_deletions = []

                for account_id in account_ids:
                    print(f"üîÑ –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {account_id}...")

                    result = await self.delete_telegram_account(
                        account_id,
                        reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
                    )

                    if result["status"] == "success":
                        deleted_accounts.append(result.get("deleted_account", f"Account {account_id}"))
                        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} —É–¥–∞–ª–µ–Ω")
                    else:
                        failed_deletions.append(f"Account {account_id}: {result['message']}")
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account_id}: {result['message']}")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(2)

                return {
                    "status": "success",
                    "message": f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ: {len(deleted_accounts)}, –æ—à–∏–±–æ–∫: {len(failed_deletions)}",
                    "deleted_accounts": deleted_accounts,
                    "failed_deletions": failed_deletions
                }

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"}

    async def get_client(self, account_id: int) -> Optional[Client]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è–º)"""
        return await self._get_client_for_account(account_id)

    async def update_profile(self, account_id: int, first_name: str = None, last_name: str = None, bio: str = None, profile_photo_path: str = None) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram"""
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: –∏–º—è={first_name}, —Ñ–∞–º–∏–ª–∏—è={last_name}, –±–∏–æ={bio}")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                me = await client.get_me()
                print(f"üë§ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {me.first_name} {me.last_name or ''}")
            except Exception as me_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {me_error}")
                me = None

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            update_success = False
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                first_name_clean = (first_name or "").strip()[:64] if first_name else ""
                last_name_clean = (last_name or "").strip()[:64] if last_name else ""
                bio_clean = (bio or "").strip()[:70] if bio else ""  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –±–∏–æ –¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤

                if not first_name_clean:
                    first_name_clean = "User"  # Telegram —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è

                print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
                print(f"   –ò–º—è: '{first_name_clean}'")
                print(f"   –§–∞–º–∏–ª–∏—è: '{last_name_clean}'")
                print(f"   –ë–∏–æ: '{bio_clean}'")

                await client.update_profile(
                    first_name=first_name_clean,
                    last_name=last_name_clean,
                    bio=bio_clean
                )

                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram")
                update_success = True

            except Exception as profile_error:
                error_str = str(profile_error).lower()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_error}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Telegram
                if "firstname_invalid" in error_str:
                    return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã"}
                elif "about_too_long" in error_str:
                    return {"status": "error", "message": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 70 —Å–∏–º–≤–æ–ª–æ–≤)"}
                elif "flood" in error_str:
                    return {"status": "error", "message": "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(profile_error)}"}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            photo_success = True
            if profile_photo_path and os.path.exists(profile_photo_path):
                try:
                    print(f"üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {profile_photo_path}")
                    await client.set_profile_photo(photo=profile_photo_path)
                    print(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as photo_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {photo_error}")
                    photo_success = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                updated_me = await client.get_me()
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_me.first_name} {updated_me.last_name or ''}")

                if update_success:
                    if profile_photo_path and not photo_success:
                        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ"}
                    else:
                        return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Telegram"}
                else:
                    return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}

            except Exception as check_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {check_error}")
                if update_success:
                    return {"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)"}
                else:
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return {"status": "error", "message": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

    async def send_reaction(self, account_id: int, chat_id: str, message_id: int, emoji: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            from pyrogram.raw import functions
            from pyrogram.raw.types import ReactionEmoji

            await client.invoke(
                functions.messages.SendReaction(
                    peer=await client.resolve_peer(chat_id),
                    msg_id=message_id,
                    reaction=[ReactionEmoji(emoticon=emoji)]
                )
            )

            return {"status": "success", "message": "–†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}"}

    async def view_message(self, account_id: int, chat_id: str, message_id: int) -> Dict:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await client.read_chat_history(chat_id=chat_id, max_id=message_id)

            return {"status": "success", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"}

    async def send_comment(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"""
        try:
            print(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment' –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∫–∞–Ω–∞–ª–∞...")

            client = await self._get_client_for_account(account_id)
            if not client:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}

            if not client.is_connected:
                await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(client, 'me') or client.me is None:
                try:
                    me = await client.get_me()
                    client.me = me
                except Exception:
                    from types import SimpleNamespace
                    client.me = SimpleNamespace(
                        id=account_id,
                        first_name="User",
                        is_premium=False,
                        is_verified=False,
                        is_bot=False
                    )

            print(f"üì∫ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º: {chat_id}, –ø–æ—Å—Ç ID: {message_id}")

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞
                from pyrogram.raw import functions, types

                # –ü–æ–ª—É—á–∞–µ–º peer –∫–∞–Ω–∞–ª–∞
                peer = await client.resolve_peer(chat_id)

                print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ discussions API...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SendMessage –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = await client.invoke(
                    functions.messages.SendMessage(
                        peer=peer,
                        message=comment,
                        reply_to=types.InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=None,  # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º top_msg_id –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            reply_to_peer_id=peer  # –£–∫–∞–∑—ã–≤–∞–µ–º peer –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        ),
                        random_id=client.rnd_id(),
                        silent=False  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Ç–∏—Ö–∏–µ
                    )
                )

                if result and hasattr(result, 'updates') and result.updates:
                    for update in result.updates:
                        if hasattr(update, 'message') and hasattr(update.message, 'id'):
                            print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'! ID: {update.message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'",
                                "message_id": update.message.id
                            }

                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'")
                return {
                    "status": "success",
                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ü–∏—é 'Leave a comment'"
                }

            except Exception as api_error:
                error_str = str(api_error)
                print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {error_str}")

                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                if "CHAT_ADMIN_REQUIRED" in error_str or "PEER_ID_INVALID" in error_str:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                        channel = await client.get_chat(chat_id)

                        # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                        discussion_group_id = None
                        if hasattr(channel, 'linked_chat') and channel.linked_chat:
                            discussion_group_id = channel.linked_chat.id
                            print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group_id}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GetFullChannel
                            try:
                                from pyrogram.raw import functions
                                peer = await client.resolve_peer(chat_id)
                                full_channel = await client.invoke(
                                    functions.channels.GetFullChannel(channel=peer)
                                )

                                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                                    discussion_group_id = -int(f"100{full_channel.full_chat.linked_chat_id}")
                                    print(f"üì¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ): {discussion_group_id}")
                            except Exception as search_error:
                                print(f"‚ùå –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª—Å—è: {search_error}")

                        if discussion_group_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            try:
                                await asyncio.sleep(1)

                                sent_message = await client.send_message(
                                    chat_id=discussion_group_id,
                                    text=comment,
                                    reply_to_message_id=message_id
                                )

                                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞)")
                                return {
                                    "status": "success",
                                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞",
                                    "message_id": sent_message.id
                                }
                            except Exception as discussion_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_error}")

                        else:
                            return {"status": "error", "message": "–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}

                    except Exception as channel_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {channel_error}")
                        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(channel_error)}"}

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "USERNAME_INVALID" in error_str:
                    return {"status": "error", "message": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞: {chat_id}"}
                elif "MESSAGE_ID_INVALID" in error_str:
                    return {"status": "error", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                elif "USER_BANNED_IN_CHANNEL" in error_str:
                    return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                elif "COMMENTS_DISABLED" in error_str:
                    return {"status": "error", "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞"}
                else:
                    return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {error_str}"}

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}"}

    async def _send_comment_telethon_enhanced(self, account_id: int, chat_id: str, message_id: int, comment: str) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Telethon –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"""
        try:
            print(f"üì± Telethon: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            db = next(get_db())
            try:
                account = db.query(Account).filter(Account.id == account_id).first()
                if not account:
                    return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                try:
                    from telethon import TelegramClient
                    from telethon.tl.functions.messages import SendMessageRequest
                    from telethon.tl.types import InputReplyToMessage
                    print(f"‚úÖ Telethon –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError:
                    print(f"‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è Telethon
                phone_clean = account.phone.replace('+', '').replace(' ', '').replace('(', '').replace(')', '').replace('-', '')
                pyrogram_session_file = os.path.join(SESSIONS_DIR, f"session_{phone_clean}.session")
                telethon_session_file = os.path.join(SESSIONS_DIR, f"telethon_{phone_clean}")

                # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è Telethon
                session_file_path = f"{telethon_session_file}.session"
                if not os.path.exists(session_file_path):
                    try:
                        print(f"üîÑ Telethon: –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–µ—Å—Å–∏—é...")
                        await self._convert_pyrogram_to_telethon_session(pyrogram_session_file, telethon_session_file)
                    except Exception as convert_error:
                        print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_error}")
                        return {"status": "error", "message": "Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"}

                # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    telethon_client = TelegramClient(telethon_session_file, API_ID, API_HASH)
                    await telethon_client.start()

                    me = await telethon_client.get_me()
                    print(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.phone})")

                except Exception as client_error:
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
                    return {"status": "error", "message": "Telethon: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}

                try:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è Telethon
                    if chat_id.startswith('@'):
                        target_entity = chat_id
                    elif chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit()):
                        target_entity = int(chat_id)
                    else:
                        target_entity = chat_id

                    print(f"üìç Telethon: –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º {target_entity}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                    entity = await telethon_client.get_entity(target_entity)
                    print(f"üìç Telethon: –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å - {type(entity).__name__}")

                    # –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è InputReplyToMessage
                    try:
                        print(f"üéØ Telethon: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç {message_id}...")

                        # –°–æ–∑–¥–∞–µ–º reply –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º
                        reply_to = InputReplyToMessage(
                            reply_to_msg_id=message_id,
                            top_msg_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—é
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply
                        result = await telethon_client(SendMessageRequest(
                            peer=entity,
                            message=comment,
                            reply_to=reply_to,
                            random_id=telethon_client._get_random_id()
                        ))

                        if result and hasattr(result, 'updates') and result.updates:
                            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            for update in result.updates:
                                if hasattr(update, 'message') and hasattr(update.message, 'id'):
                                    print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç! ID: {update.message.id}")
                                    return {
                                        "status": "success",
                                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞",
                                        "message_id": update.message.id
                                    }

                        print(f"‚úÖ Telethon: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (–±–µ–∑ ID)")
                        return {
                            "status": "success",
                            "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞"
                        }

                    except Exception as direct_error:
                        error_str = str(direct_error)
                        print(f"‚ùå Telethon: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_str}")

                        # –ú–µ—Ç–æ–¥ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        try:
                            print(f"üîÑ Telethon: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reply –º–µ—Ç–æ–¥...")

                            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

                            sent_message = await telethon_client.send_message(
                                entity=entity,
                                message=comment,
                                reply_to=message_id
                            )

                            print(f"‚úÖ Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª! ID: {sent_message.id}")
                            return {
                                "status": "success",
                                "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥ –ø–æ—Å—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥)",
                                "message_id": sent_message.id
                            }

                        except Exception as standard_error:
                            error_str = str(standard_error)
                            print(f"‚ùå Telethon: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {error_str}")

                            if "CHAT_ADMIN_REQUIRED" in error_str:
                                return {"status": "error", "message": "Telethon: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"}
                            elif "MSG_ID_INVALID" in error_str:
                                return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"}
                            elif "USER_BANNED_IN_CHANNEL" in error_str:
                                return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ"}
                            else:
                                return {"status": "error", "message": f"Telethon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {error_str}"}

                except Exception as send_error:
                    error_str = str(send_error)
                    print(f"‚ùå Telethon: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_str}")

                    if "USERNAME_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞"}
                    elif "PEER_ID_INVALID" in error_str:
                        return {"status": "error", "message": "Telethon: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    elif "USER_BANNED_IN_CHANNEL" in error_str:
                        return {"status": "error", "message": "Telethon: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
                    else:
                        return {"status": "error", "message": f"Telethon: {error_str}"}

                finally:
                    print(f"üîå Telethon: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
                    await telethon_client.disconnect()

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    try:
                        session_file_path = f"{telethon_session_file}.session"
                        if os.path.exists(session_file_path):
                            os.remove(session_file_path)
                            print(f"üóëÔ∏è Telethon: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        print(f"‚ö†Ô∏è Telethon: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {cleanup_error}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå Telethon: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üîç Telethon: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {"status": "error", "message": f"Telethon: {str(e)}"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
telegram_manager = TelegramManager()